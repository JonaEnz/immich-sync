// Code generated by ogen, DO NOT EDIT.

package oapi

import (
	"context"

	ht "github.com/ogen-go/ogen/http"
)

// UnimplementedHandler is no-op Handler which returns http.ErrNotImplemented.
type UnimplementedHandler struct{}

var _ Handler = UnimplementedHandler{}

// AddAssetsToAlbum implements addAssetsToAlbum operation.
//
// This endpoint requires the `albumAsset.create` permission.
//
// PUT /albums/{id}/assets
func (UnimplementedHandler) AddAssetsToAlbum(ctx context.Context, req *BulkIdsDto, params AddAssetsToAlbumParams) (r []BulkIdResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// AddAssetsToAlbums implements addAssetsToAlbums operation.
//
// This endpoint requires the `albumAsset.create` permission.
//
// PUT /albums/assets
func (UnimplementedHandler) AddAssetsToAlbums(ctx context.Context, req *AlbumsAddAssetsDto, params AddAssetsToAlbumsParams) (r *AlbumsAddAssetsResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// AddMemoryAssets implements addMemoryAssets operation.
//
// This endpoint requires the `memoryAsset.create` permission.
//
// PUT /memories/{id}/assets
func (UnimplementedHandler) AddMemoryAssets(ctx context.Context, req *BulkIdsDto, params AddMemoryAssetsParams) (r []BulkIdResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// AddSharedLinkAssets implements addSharedLinkAssets operation.
//
// PUT /shared-links/{id}/assets
func (UnimplementedHandler) AddSharedLinkAssets(ctx context.Context, req *AssetIdsDto, params AddSharedLinkAssetsParams) (r []AssetIdsResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// AddUsersToAlbum implements addUsersToAlbum operation.
//
// This endpoint requires the `albumUser.create` permission.
//
// PUT /albums/{id}/users
func (UnimplementedHandler) AddUsersToAlbum(ctx context.Context, req *AddUsersDto, params AddUsersToAlbumParams) (r *AlbumResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// BulkTagAssets implements bulkTagAssets operation.
//
// This endpoint requires the `tag.asset` permission.
//
// PUT /tags/assets
func (UnimplementedHandler) BulkTagAssets(ctx context.Context, req *TagBulkAssetsDto) (r *TagBulkAssetsResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// ChangePassword implements changePassword operation.
//
// This endpoint requires the `auth.changePassword` permission.
//
// POST /auth/change-password
func (UnimplementedHandler) ChangePassword(ctx context.Context, req *ChangePasswordDto) (r *UserAdminResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// ChangePinCode implements changePinCode operation.
//
// This endpoint requires the `pinCode.update` permission.
//
// PUT /auth/pin-code
func (UnimplementedHandler) ChangePinCode(ctx context.Context, req *PinCodeChangeDto) error {
	return ht.ErrNotImplemented
}

// CheckBulkUpload implements checkBulkUpload operation.
//
// Checks if assets exist by checksums. This endpoint requires the `asset.upload` permission.
//
// POST /assets/bulk-upload-check
func (UnimplementedHandler) CheckBulkUpload(ctx context.Context, req *AssetBulkUploadCheckDto) (r *AssetBulkUploadCheckResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// CheckExistingAssets implements checkExistingAssets operation.
//
// Checks if multiple assets exist on the server and returns all existing - used by background backup.
//
// POST /assets/exist
func (UnimplementedHandler) CheckExistingAssets(ctx context.Context, req *CheckExistingAssetsDto) (r *CheckExistingAssetsResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// CreateActivity implements createActivity operation.
//
// This endpoint requires the `activity.create` permission.
//
// POST /activities
func (UnimplementedHandler) CreateActivity(ctx context.Context, req *ActivityCreateDto) (r *ActivityResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// CreateAlbum implements createAlbum operation.
//
// This endpoint requires the `album.create` permission.
//
// POST /albums
func (UnimplementedHandler) CreateAlbum(ctx context.Context, req *CreateAlbumDto) (r *AlbumResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// CreateApiKey implements createApiKey operation.
//
// This endpoint requires the `apiKey.create` permission.
//
// POST /api-keys
func (UnimplementedHandler) CreateApiKey(ctx context.Context, req *APIKeyCreateDto) (r *APIKeyCreateResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// CreateFace implements createFace operation.
//
// This endpoint requires the `face.create` permission.
//
// POST /faces
func (UnimplementedHandler) CreateFace(ctx context.Context, req *AssetFaceCreateDto) error {
	return ht.ErrNotImplemented
}

// CreateJob implements createJob operation.
//
// This endpoint is an admin-only route, and requires the `job.create` permission.
//
// POST /jobs
func (UnimplementedHandler) CreateJob(ctx context.Context, req *JobCreateDto) error {
	return ht.ErrNotImplemented
}

// CreateLibrary implements createLibrary operation.
//
// This endpoint is an admin-only route, and requires the `library.create` permission.
//
// POST /libraries
func (UnimplementedHandler) CreateLibrary(ctx context.Context, req *CreateLibraryDto) (r *LibraryResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// CreateMemory implements createMemory operation.
//
// This endpoint requires the `memory.create` permission.
//
// POST /memories
func (UnimplementedHandler) CreateMemory(ctx context.Context, req *MemoryCreateDto) (r *MemoryResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// CreateNotification implements createNotification operation.
//
// POST /admin/notifications
func (UnimplementedHandler) CreateNotification(ctx context.Context, req *NotificationCreateDto) (r *NotificationDto, _ error) {
	return r, ht.ErrNotImplemented
}

// CreatePartner implements createPartner operation.
//
// This endpoint requires the `partner.create` permission.
//
// POST /partners
func (UnimplementedHandler) CreatePartner(ctx context.Context, req *PartnerCreateDto) (r *PartnerResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// CreatePartnerDeprecated implements createPartnerDeprecated operation.
//
// This property was deprecated in v1.141.0. This endpoint requires the `partner.create` permission.
//
// Deprecated: schema marks this operation as deprecated.
//
// POST /partners/{id}
func (UnimplementedHandler) CreatePartnerDeprecated(ctx context.Context, params CreatePartnerDeprecatedParams) (r *PartnerResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// CreatePerson implements createPerson operation.
//
// This endpoint requires the `person.create` permission.
//
// POST /people
func (UnimplementedHandler) CreatePerson(ctx context.Context, req *PersonCreateDto) (r *PersonResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// CreateProfileImage implements createProfileImage operation.
//
// This endpoint requires the `userProfileImage.update` permission.
//
// POST /users/profile-image
func (UnimplementedHandler) CreateProfileImage(ctx context.Context, req *CreateProfileImageDtoMultipart) (r *CreateProfileImageResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// CreateSession implements createSession operation.
//
// This endpoint requires the `session.create` permission.
//
// POST /sessions
func (UnimplementedHandler) CreateSession(ctx context.Context, req *SessionCreateDto) (r *SessionCreateResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// CreateSharedLink implements createSharedLink operation.
//
// This endpoint requires the `sharedLink.create` permission.
//
// POST /shared-links
func (UnimplementedHandler) CreateSharedLink(ctx context.Context, req *SharedLinkCreateDto) (r *SharedLinkResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// CreateStack implements createStack operation.
//
// This endpoint requires the `stack.create` permission.
//
// POST /stacks
func (UnimplementedHandler) CreateStack(ctx context.Context, req *StackCreateDto) (r *StackResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// CreateTag implements createTag operation.
//
// This endpoint requires the `tag.create` permission.
//
// POST /tags
func (UnimplementedHandler) CreateTag(ctx context.Context, req *TagCreateDto) (r *TagResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// CreateUserAdmin implements createUserAdmin operation.
//
// This endpoint is an admin-only route, and requires the `adminUser.create` permission.
//
// POST /admin/users
func (UnimplementedHandler) CreateUserAdmin(ctx context.Context, req *UserAdminCreateDto) (r *UserAdminResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// DeleteActivity implements deleteActivity operation.
//
// This endpoint requires the `activity.delete` permission.
//
// DELETE /activities/{id}
func (UnimplementedHandler) DeleteActivity(ctx context.Context, params DeleteActivityParams) error {
	return ht.ErrNotImplemented
}

// DeleteAlbum implements deleteAlbum operation.
//
// This endpoint requires the `album.delete` permission.
//
// DELETE /albums/{id}
func (UnimplementedHandler) DeleteAlbum(ctx context.Context, params DeleteAlbumParams) error {
	return ht.ErrNotImplemented
}

// DeleteAllSessions implements deleteAllSessions operation.
//
// This endpoint requires the `session.delete` permission.
//
// DELETE /sessions
func (UnimplementedHandler) DeleteAllSessions(ctx context.Context) error {
	return ht.ErrNotImplemented
}

// DeleteApiKey implements deleteApiKey operation.
//
// This endpoint requires the `apiKey.delete` permission.
//
// DELETE /api-keys/{id}
func (UnimplementedHandler) DeleteApiKey(ctx context.Context, params DeleteApiKeyParams) error {
	return ht.ErrNotImplemented
}

// DeleteAssetMetadata implements deleteAssetMetadata operation.
//
// This endpoint requires the `asset.update` permission.
//
// DELETE /assets/{id}/metadata/{key}
func (UnimplementedHandler) DeleteAssetMetadata(ctx context.Context, params DeleteAssetMetadataParams) error {
	return ht.ErrNotImplemented
}

// DeleteAssets implements deleteAssets operation.
//
// This endpoint requires the `asset.delete` permission.
//
// DELETE /assets
func (UnimplementedHandler) DeleteAssets(ctx context.Context, req *AssetBulkDeleteDto) error {
	return ht.ErrNotImplemented
}

// DeleteDuplicate implements deleteDuplicate operation.
//
// This endpoint requires the `duplicate.delete` permission.
//
// DELETE /duplicates/{id}
func (UnimplementedHandler) DeleteDuplicate(ctx context.Context, params DeleteDuplicateParams) error {
	return ht.ErrNotImplemented
}

// DeleteDuplicates implements deleteDuplicates operation.
//
// This endpoint requires the `duplicate.delete` permission.
//
// DELETE /duplicates
func (UnimplementedHandler) DeleteDuplicates(ctx context.Context, req *BulkIdsDto) error {
	return ht.ErrNotImplemented
}

// DeleteFace implements deleteFace operation.
//
// This endpoint requires the `face.delete` permission.
//
// DELETE /faces/{id}
func (UnimplementedHandler) DeleteFace(ctx context.Context, req *AssetFaceDeleteDto, params DeleteFaceParams) error {
	return ht.ErrNotImplemented
}

// DeleteLibrary implements deleteLibrary operation.
//
// This endpoint is an admin-only route, and requires the `library.delete` permission.
//
// DELETE /libraries/{id}
func (UnimplementedHandler) DeleteLibrary(ctx context.Context, params DeleteLibraryParams) error {
	return ht.ErrNotImplemented
}

// DeleteMemory implements deleteMemory operation.
//
// This endpoint requires the `memory.delete` permission.
//
// DELETE /memories/{id}
func (UnimplementedHandler) DeleteMemory(ctx context.Context, params DeleteMemoryParams) error {
	return ht.ErrNotImplemented
}

// DeleteNotification implements deleteNotification operation.
//
// This endpoint requires the `notification.delete` permission.
//
// DELETE /notifications/{id}
func (UnimplementedHandler) DeleteNotification(ctx context.Context, params DeleteNotificationParams) error {
	return ht.ErrNotImplemented
}

// DeleteNotifications implements deleteNotifications operation.
//
// This endpoint requires the `notification.delete` permission.
//
// DELETE /notifications
func (UnimplementedHandler) DeleteNotifications(ctx context.Context, req *NotificationDeleteAllDto) error {
	return ht.ErrNotImplemented
}

// DeletePeople implements deletePeople operation.
//
// This endpoint requires the `person.delete` permission.
//
// DELETE /people
func (UnimplementedHandler) DeletePeople(ctx context.Context, req *BulkIdsDto) error {
	return ht.ErrNotImplemented
}

// DeletePerson implements deletePerson operation.
//
// This endpoint requires the `person.delete` permission.
//
// DELETE /people/{id}
func (UnimplementedHandler) DeletePerson(ctx context.Context, params DeletePersonParams) error {
	return ht.ErrNotImplemented
}

// DeleteProfileImage implements deleteProfileImage operation.
//
// This endpoint requires the `userProfileImage.delete` permission.
//
// DELETE /users/profile-image
func (UnimplementedHandler) DeleteProfileImage(ctx context.Context) error {
	return ht.ErrNotImplemented
}

// DeleteServerLicense implements deleteServerLicense operation.
//
// This endpoint is an admin-only route, and requires the `serverLicense.delete` permission.
//
// DELETE /server/license
func (UnimplementedHandler) DeleteServerLicense(ctx context.Context) error {
	return ht.ErrNotImplemented
}

// DeleteSession implements deleteSession operation.
//
// This endpoint requires the `session.delete` permission.
//
// DELETE /sessions/{id}
func (UnimplementedHandler) DeleteSession(ctx context.Context, params DeleteSessionParams) error {
	return ht.ErrNotImplemented
}

// DeleteStack implements deleteStack operation.
//
// This endpoint requires the `stack.delete` permission.
//
// DELETE /stacks/{id}
func (UnimplementedHandler) DeleteStack(ctx context.Context, params DeleteStackParams) error {
	return ht.ErrNotImplemented
}

// DeleteStacks implements deleteStacks operation.
//
// This endpoint requires the `stack.delete` permission.
//
// DELETE /stacks
func (UnimplementedHandler) DeleteStacks(ctx context.Context, req *BulkIdsDto) error {
	return ht.ErrNotImplemented
}

// DeleteSyncAck implements deleteSyncAck operation.
//
// This endpoint requires the `syncCheckpoint.delete` permission.
//
// DELETE /sync/ack
func (UnimplementedHandler) DeleteSyncAck(ctx context.Context, req *SyncAckDeleteDto) error {
	return ht.ErrNotImplemented
}

// DeleteTag implements deleteTag operation.
//
// This endpoint requires the `tag.delete` permission.
//
// DELETE /tags/{id}
func (UnimplementedHandler) DeleteTag(ctx context.Context, params DeleteTagParams) error {
	return ht.ErrNotImplemented
}

// DeleteUserAdmin implements deleteUserAdmin operation.
//
// This endpoint is an admin-only route, and requires the `adminUser.delete` permission.
//
// DELETE /admin/users/{id}
func (UnimplementedHandler) DeleteUserAdmin(ctx context.Context, req *UserAdminDeleteDto, params DeleteUserAdminParams) (r *UserAdminResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// DeleteUserLicense implements deleteUserLicense operation.
//
// This endpoint requires the `userLicense.delete` permission.
//
// DELETE /users/me/license
func (UnimplementedHandler) DeleteUserLicense(ctx context.Context) error {
	return ht.ErrNotImplemented
}

// DeleteUserOnboarding implements deleteUserOnboarding operation.
//
// This endpoint requires the `userOnboarding.delete` permission.
//
// DELETE /users/me/onboarding
func (UnimplementedHandler) DeleteUserOnboarding(ctx context.Context) error {
	return ht.ErrNotImplemented
}

// DownloadArchive implements downloadArchive operation.
//
// This endpoint requires the `asset.download` permission.
//
// POST /download/archive
func (UnimplementedHandler) DownloadArchive(ctx context.Context, req *AssetIdsDto, params DownloadArchiveParams) (r DownloadArchiveOK, _ error) {
	return r, ht.ErrNotImplemented
}

// DownloadAsset implements downloadAsset operation.
//
// This endpoint requires the `asset.download` permission.
//
// GET /assets/{id}/original
func (UnimplementedHandler) DownloadAsset(ctx context.Context, params DownloadAssetParams) (r DownloadAssetOK, _ error) {
	return r, ht.ErrNotImplemented
}

// EmptyTrash implements emptyTrash operation.
//
// This endpoint requires the `asset.delete` permission.
//
// POST /trash/empty
func (UnimplementedHandler) EmptyTrash(ctx context.Context) (r *TrashResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// FinishOAuth implements finishOAuth operation.
//
// POST /oauth/callback
func (UnimplementedHandler) FinishOAuth(ctx context.Context, req *OAuthCallbackDto) (r *LoginResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// GetAboutInfo implements getAboutInfo operation.
//
// This endpoint requires the `server.about` permission.
//
// GET /server/about
func (UnimplementedHandler) GetAboutInfo(ctx context.Context) (r *ServerAboutResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// GetActivities implements getActivities operation.
//
// This endpoint requires the `activity.read` permission.
//
// GET /activities
func (UnimplementedHandler) GetActivities(ctx context.Context, params GetActivitiesParams) (r []ActivityResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// GetActivityStatistics implements getActivityStatistics operation.
//
// This endpoint requires the `activity.statistics` permission.
//
// GET /activities/statistics
func (UnimplementedHandler) GetActivityStatistics(ctx context.Context, params GetActivityStatisticsParams) (r *ActivityStatisticsResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// GetAdminOnboarding implements getAdminOnboarding operation.
//
// This endpoint is an admin-only route, and requires the `systemMetadata.read` permission.
//
// GET /system-metadata/admin-onboarding
func (UnimplementedHandler) GetAdminOnboarding(ctx context.Context) (r *AdminOnboardingUpdateDto, _ error) {
	return r, ht.ErrNotImplemented
}

// GetAlbumInfo implements getAlbumInfo operation.
//
// This endpoint requires the `album.read` permission.
//
// GET /albums/{id}
func (UnimplementedHandler) GetAlbumInfo(ctx context.Context, params GetAlbumInfoParams) (r *AlbumResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// GetAlbumStatistics implements getAlbumStatistics operation.
//
// This endpoint requires the `album.statistics` permission.
//
// GET /albums/statistics
func (UnimplementedHandler) GetAlbumStatistics(ctx context.Context) (r *AlbumStatisticsResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// GetAllAlbums implements getAllAlbums operation.
//
// This endpoint requires the `album.read` permission.
//
// GET /albums
func (UnimplementedHandler) GetAllAlbums(ctx context.Context, params GetAllAlbumsParams) (r []AlbumResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// GetAllJobsStatus implements getAllJobsStatus operation.
//
// This endpoint is an admin-only route, and requires the `job.read` permission.
//
// GET /jobs
func (UnimplementedHandler) GetAllJobsStatus(ctx context.Context) (r *AllJobStatusResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// GetAllLibraries implements getAllLibraries operation.
//
// This endpoint is an admin-only route, and requires the `library.read` permission.
//
// GET /libraries
func (UnimplementedHandler) GetAllLibraries(ctx context.Context) (r []LibraryResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// GetAllPeople implements getAllPeople operation.
//
// This endpoint requires the `person.read` permission.
//
// GET /people
func (UnimplementedHandler) GetAllPeople(ctx context.Context, params GetAllPeopleParams) (r *PeopleResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// GetAllSharedLinks implements getAllSharedLinks operation.
//
// This endpoint requires the `sharedLink.read` permission.
//
// GET /shared-links
func (UnimplementedHandler) GetAllSharedLinks(ctx context.Context, params GetAllSharedLinksParams) (r []SharedLinkResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// GetAllTags implements getAllTags operation.
//
// This endpoint requires the `tag.read` permission.
//
// GET /tags
func (UnimplementedHandler) GetAllTags(ctx context.Context) (r []TagResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// GetAllUserAssetsByDeviceId implements getAllUserAssetsByDeviceId operation.
//
// Get all asset of a device that are in the database, ID only.
//
// GET /assets/device/{deviceId}
func (UnimplementedHandler) GetAllUserAssetsByDeviceId(ctx context.Context, params GetAllUserAssetsByDeviceIdParams) (r []string, _ error) {
	return r, ht.ErrNotImplemented
}

// GetApiKey implements getApiKey operation.
//
// This endpoint requires the `apiKey.read` permission.
//
// GET /api-keys/{id}
func (UnimplementedHandler) GetApiKey(ctx context.Context, params GetApiKeyParams) (r *APIKeyResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// GetApiKeys implements getApiKeys operation.
//
// This endpoint requires the `apiKey.read` permission.
//
// GET /api-keys
func (UnimplementedHandler) GetApiKeys(ctx context.Context) (r []APIKeyResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// GetApkLinks implements getApkLinks operation.
//
// This endpoint requires the `server.apkLinks` permission.
//
// GET /server/apk-links
func (UnimplementedHandler) GetApkLinks(ctx context.Context) (r *ServerApkLinksDto, _ error) {
	return r, ht.ErrNotImplemented
}

// GetAssetDuplicates implements getAssetDuplicates operation.
//
// This endpoint requires the `duplicate.read` permission.
//
// GET /duplicates
func (UnimplementedHandler) GetAssetDuplicates(ctx context.Context) (r []DuplicateResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// GetAssetInfo implements getAssetInfo operation.
//
// This endpoint requires the `asset.read` permission.
//
// GET /assets/{id}
func (UnimplementedHandler) GetAssetInfo(ctx context.Context, params GetAssetInfoParams) (r *AssetResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// GetAssetMetadata implements getAssetMetadata operation.
//
// This endpoint requires the `asset.read` permission.
//
// GET /assets/{id}/metadata
func (UnimplementedHandler) GetAssetMetadata(ctx context.Context, params GetAssetMetadataParams) (r []AssetMetadataResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// GetAssetMetadataByKey implements getAssetMetadataByKey operation.
//
// This endpoint requires the `asset.read` permission.
//
// GET /assets/{id}/metadata/{key}
func (UnimplementedHandler) GetAssetMetadataByKey(ctx context.Context, params GetAssetMetadataByKeyParams) (r *AssetMetadataResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// GetAssetStatistics implements getAssetStatistics operation.
//
// This endpoint requires the `asset.statistics` permission.
//
// GET /assets/statistics
func (UnimplementedHandler) GetAssetStatistics(ctx context.Context, params GetAssetStatisticsParams) (r *AssetStatsResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// GetAssetsByCity implements getAssetsByCity operation.
//
// This endpoint requires the `asset.read` permission.
//
// GET /search/cities
func (UnimplementedHandler) GetAssetsByCity(ctx context.Context) (r []AssetResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// GetAssetsByOriginalPath implements getAssetsByOriginalPath operation.
//
// GET /view/folder
func (UnimplementedHandler) GetAssetsByOriginalPath(ctx context.Context, params GetAssetsByOriginalPathParams) (r []AssetResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// GetAuthStatus implements getAuthStatus operation.
//
// GET /auth/status
func (UnimplementedHandler) GetAuthStatus(ctx context.Context) (r *AuthStatusResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// GetConfig implements getConfig operation.
//
// This endpoint is an admin-only route, and requires the `systemConfig.read` permission.
//
// GET /system-config
func (UnimplementedHandler) GetConfig(ctx context.Context) (r *SystemConfigDto, _ error) {
	return r, ht.ErrNotImplemented
}

// GetConfigDefaults implements getConfigDefaults operation.
//
// This endpoint is an admin-only route, and requires the `systemConfig.read` permission.
//
// GET /system-config/defaults
func (UnimplementedHandler) GetConfigDefaults(ctx context.Context) (r *SystemConfigDto, _ error) {
	return r, ht.ErrNotImplemented
}

// GetDeltaSync implements getDeltaSync operation.
//
// POST /sync/delta-sync
func (UnimplementedHandler) GetDeltaSync(ctx context.Context, req *AssetDeltaSyncDto) (r *AssetDeltaSyncResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// GetDownloadInfo implements getDownloadInfo operation.
//
// This endpoint requires the `asset.download` permission.
//
// POST /download/info
func (UnimplementedHandler) GetDownloadInfo(ctx context.Context, req *DownloadInfoDto, params GetDownloadInfoParams) (r *DownloadResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// GetExploreData implements getExploreData operation.
//
// This endpoint requires the `asset.read` permission.
//
// GET /search/explore
func (UnimplementedHandler) GetExploreData(ctx context.Context) (r []SearchExploreResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// GetFaces implements getFaces operation.
//
// This endpoint requires the `face.read` permission.
//
// GET /faces
func (UnimplementedHandler) GetFaces(ctx context.Context, params GetFacesParams) (r []AssetFaceResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// GetFullSyncForUser implements getFullSyncForUser operation.
//
// POST /sync/full-sync
func (UnimplementedHandler) GetFullSyncForUser(ctx context.Context, req *AssetFullSyncDto) (r []AssetResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// GetLibrary implements getLibrary operation.
//
// This endpoint is an admin-only route, and requires the `library.read` permission.
//
// GET /libraries/{id}
func (UnimplementedHandler) GetLibrary(ctx context.Context, params GetLibraryParams) (r *LibraryResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// GetLibraryStatistics implements getLibraryStatistics operation.
//
// This endpoint is an admin-only route, and requires the `library.statistics` permission.
//
// GET /libraries/{id}/statistics
func (UnimplementedHandler) GetLibraryStatistics(ctx context.Context, params GetLibraryStatisticsParams) (r *LibraryStatsResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// GetMapMarkers implements getMapMarkers operation.
//
// GET /map/markers
func (UnimplementedHandler) GetMapMarkers(ctx context.Context, params GetMapMarkersParams) (r []MapMarkerResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// GetMemory implements getMemory operation.
//
// This endpoint requires the `memory.read` permission.
//
// GET /memories/{id}
func (UnimplementedHandler) GetMemory(ctx context.Context, params GetMemoryParams) (r *MemoryResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// GetMyApiKey implements getMyApiKey operation.
//
// GET /api-keys/me
func (UnimplementedHandler) GetMyApiKey(ctx context.Context) (r *APIKeyResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// GetMyPreferences implements getMyPreferences operation.
//
// This endpoint requires the `userPreference.read` permission.
//
// GET /users/me/preferences
func (UnimplementedHandler) GetMyPreferences(ctx context.Context) (r *UserPreferencesResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// GetMySharedLink implements getMySharedLink operation.
//
// GET /shared-links/me
func (UnimplementedHandler) GetMySharedLink(ctx context.Context, params GetMySharedLinkParams) (r *SharedLinkResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// GetMyUser implements getMyUser operation.
//
// This endpoint requires the `user.read` permission.
//
// GET /users/me
func (UnimplementedHandler) GetMyUser(ctx context.Context) (r *UserAdminResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// GetNotification implements getNotification operation.
//
// This endpoint requires the `notification.read` permission.
//
// GET /notifications/{id}
func (UnimplementedHandler) GetNotification(ctx context.Context, params GetNotificationParams) (r *NotificationDto, _ error) {
	return r, ht.ErrNotImplemented
}

// GetNotificationTemplateAdmin implements getNotificationTemplateAdmin operation.
//
// POST /admin/notifications/templates/{name}
func (UnimplementedHandler) GetNotificationTemplateAdmin(ctx context.Context, req *TemplateDto, params GetNotificationTemplateAdminParams) (r *TemplateResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// GetNotifications implements getNotifications operation.
//
// This endpoint requires the `notification.read` permission.
//
// GET /notifications
func (UnimplementedHandler) GetNotifications(ctx context.Context, params GetNotificationsParams) (r []NotificationDto, _ error) {
	return r, ht.ErrNotImplemented
}

// GetPartners implements getPartners operation.
//
// This endpoint requires the `partner.read` permission.
//
// GET /partners
func (UnimplementedHandler) GetPartners(ctx context.Context, params GetPartnersParams) (r []PartnerResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// GetPerson implements getPerson operation.
//
// This endpoint requires the `person.read` permission.
//
// GET /people/{id}
func (UnimplementedHandler) GetPerson(ctx context.Context, params GetPersonParams) (r *PersonResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// GetPersonStatistics implements getPersonStatistics operation.
//
// This endpoint requires the `person.statistics` permission.
//
// GET /people/{id}/statistics
func (UnimplementedHandler) GetPersonStatistics(ctx context.Context, params GetPersonStatisticsParams) (r *PersonStatisticsResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// GetPersonThumbnail implements getPersonThumbnail operation.
//
// This endpoint requires the `person.read` permission.
//
// GET /people/{id}/thumbnail
func (UnimplementedHandler) GetPersonThumbnail(ctx context.Context, params GetPersonThumbnailParams) (r GetPersonThumbnailOK, _ error) {
	return r, ht.ErrNotImplemented
}

// GetProfileImage implements getProfileImage operation.
//
// This endpoint requires the `userProfileImage.read` permission.
//
// GET /users/{id}/profile-image
func (UnimplementedHandler) GetProfileImage(ctx context.Context, params GetProfileImageParams) (r GetProfileImageOK, _ error) {
	return r, ht.ErrNotImplemented
}

// GetRandom implements getRandom operation.
//
// This property was deprecated in v1.116.0. This endpoint requires the `asset.read` permission.
//
// Deprecated: schema marks this operation as deprecated.
//
// GET /assets/random
func (UnimplementedHandler) GetRandom(ctx context.Context, params GetRandomParams) (r []AssetResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// GetReverseGeocodingState implements getReverseGeocodingState operation.
//
// This endpoint is an admin-only route, and requires the `systemMetadata.read` permission.
//
// GET /system-metadata/reverse-geocoding-state
func (UnimplementedHandler) GetReverseGeocodingState(ctx context.Context) (r *ReverseGeocodingStateResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// GetSearchSuggestions implements getSearchSuggestions operation.
//
// This endpoint requires the `asset.read` permission.
//
// GET /search/suggestions
func (UnimplementedHandler) GetSearchSuggestions(ctx context.Context, params GetSearchSuggestionsParams) (r []string, _ error) {
	return r, ht.ErrNotImplemented
}

// GetServerConfig implements getServerConfig operation.
//
// GET /server/config
func (UnimplementedHandler) GetServerConfig(ctx context.Context) (r *ServerConfigDto, _ error) {
	return r, ht.ErrNotImplemented
}

// GetServerFeatures implements getServerFeatures operation.
//
// GET /server/features
func (UnimplementedHandler) GetServerFeatures(ctx context.Context) (r *ServerFeaturesDto, _ error) {
	return r, ht.ErrNotImplemented
}

// GetServerLicense implements getServerLicense operation.
//
// This endpoint is an admin-only route, and requires the `serverLicense.read` permission.
//
// GET /server/license
func (UnimplementedHandler) GetServerLicense(ctx context.Context) (r GetServerLicenseRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetServerStatistics implements getServerStatistics operation.
//
// This endpoint is an admin-only route, and requires the `server.statistics` permission.
//
// GET /server/statistics
func (UnimplementedHandler) GetServerStatistics(ctx context.Context) (r *ServerStatsResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// GetServerVersion implements getServerVersion operation.
//
// GET /server/version
func (UnimplementedHandler) GetServerVersion(ctx context.Context) (r *ServerVersionResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// GetSessions implements getSessions operation.
//
// This endpoint requires the `session.read` permission.
//
// GET /sessions
func (UnimplementedHandler) GetSessions(ctx context.Context) (r []SessionResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// GetSharedLinkById implements getSharedLinkById operation.
//
// This endpoint requires the `sharedLink.read` permission.
//
// GET /shared-links/{id}
func (UnimplementedHandler) GetSharedLinkById(ctx context.Context, params GetSharedLinkByIdParams) (r *SharedLinkResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// GetStack implements getStack operation.
//
// This endpoint requires the `stack.read` permission.
//
// GET /stacks/{id}
func (UnimplementedHandler) GetStack(ctx context.Context, params GetStackParams) (r *StackResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// GetStorage implements getStorage operation.
//
// This endpoint requires the `server.storage` permission.
//
// GET /server/storage
func (UnimplementedHandler) GetStorage(ctx context.Context) (r *ServerStorageResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// GetStorageTemplateOptions implements getStorageTemplateOptions operation.
//
// This endpoint is an admin-only route, and requires the `systemConfig.read` permission.
//
// GET /system-config/storage-template-options
func (UnimplementedHandler) GetStorageTemplateOptions(ctx context.Context) (r *SystemConfigTemplateStorageOptionDto, _ error) {
	return r, ht.ErrNotImplemented
}

// GetSupportedMediaTypes implements getSupportedMediaTypes operation.
//
// GET /server/media-types
func (UnimplementedHandler) GetSupportedMediaTypes(ctx context.Context) (r *ServerMediaTypesResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// GetSyncAck implements getSyncAck operation.
//
// This endpoint requires the `syncCheckpoint.read` permission.
//
// GET /sync/ack
func (UnimplementedHandler) GetSyncAck(ctx context.Context) (r []SyncAckDto, _ error) {
	return r, ht.ErrNotImplemented
}

// GetSyncStream implements getSyncStream operation.
//
// This endpoint requires the `sync.stream` permission.
//
// POST /sync/stream
func (UnimplementedHandler) GetSyncStream(ctx context.Context, req *SyncStreamDto) error {
	return ht.ErrNotImplemented
}

// GetTagById implements getTagById operation.
//
// This endpoint requires the `tag.read` permission.
//
// GET /tags/{id}
func (UnimplementedHandler) GetTagById(ctx context.Context, params GetTagByIdParams) (r *TagResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// GetTheme implements getTheme operation.
//
// GET /server/theme
func (UnimplementedHandler) GetTheme(ctx context.Context) (r *ServerThemeDto, _ error) {
	return r, ht.ErrNotImplemented
}

// GetTimeBucket implements getTimeBucket operation.
//
// This endpoint requires the `asset.read` permission.
//
// GET /timeline/bucket
func (UnimplementedHandler) GetTimeBucket(ctx context.Context, params GetTimeBucketParams) (r *TimeBucketAssetResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// GetTimeBuckets implements getTimeBuckets operation.
//
// This endpoint requires the `asset.read` permission.
//
// GET /timeline/buckets
func (UnimplementedHandler) GetTimeBuckets(ctx context.Context, params GetTimeBucketsParams) (r []TimeBucketsResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// GetUniqueOriginalPaths implements getUniqueOriginalPaths operation.
//
// GET /view/folder/unique-paths
func (UnimplementedHandler) GetUniqueOriginalPaths(ctx context.Context) (r []string, _ error) {
	return r, ht.ErrNotImplemented
}

// GetUser implements getUser operation.
//
// This endpoint requires the `user.read` permission.
//
// GET /users/{id}
func (UnimplementedHandler) GetUser(ctx context.Context, params GetUserParams) (r *UserResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// GetUserAdmin implements getUserAdmin operation.
//
// This endpoint is an admin-only route, and requires the `adminUser.read` permission.
//
// GET /admin/users/{id}
func (UnimplementedHandler) GetUserAdmin(ctx context.Context, params GetUserAdminParams) (r *UserAdminResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// GetUserLicense implements getUserLicense operation.
//
// This endpoint requires the `userLicense.read` permission.
//
// GET /users/me/license
func (UnimplementedHandler) GetUserLicense(ctx context.Context) (r *LicenseResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// GetUserOnboarding implements getUserOnboarding operation.
//
// This endpoint requires the `userOnboarding.read` permission.
//
// GET /users/me/onboarding
func (UnimplementedHandler) GetUserOnboarding(ctx context.Context) (r *OnboardingResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// GetUserPreferencesAdmin implements getUserPreferencesAdmin operation.
//
// This endpoint is an admin-only route, and requires the `adminUser.read` permission.
//
// GET /admin/users/{id}/preferences
func (UnimplementedHandler) GetUserPreferencesAdmin(ctx context.Context, params GetUserPreferencesAdminParams) (r *UserPreferencesResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// GetUserStatisticsAdmin implements getUserStatisticsAdmin operation.
//
// This endpoint is an admin-only route, and requires the `adminUser.read` permission.
//
// GET /admin/users/{id}/statistics
func (UnimplementedHandler) GetUserStatisticsAdmin(ctx context.Context, params GetUserStatisticsAdminParams) (r *AssetStatsResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// GetVersionCheck implements getVersionCheck operation.
//
// This endpoint requires the `server.versionCheck` permission.
//
// GET /server/version-check
func (UnimplementedHandler) GetVersionCheck(ctx context.Context) (r *VersionCheckStateResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// GetVersionCheckState implements getVersionCheckState operation.
//
// This endpoint is an admin-only route, and requires the `systemMetadata.read` permission.
//
// GET /system-metadata/version-check-state
func (UnimplementedHandler) GetVersionCheckState(ctx context.Context) (r *VersionCheckStateResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// GetVersionHistory implements getVersionHistory operation.
//
// GET /server/version-history
func (UnimplementedHandler) GetVersionHistory(ctx context.Context) (r []ServerVersionHistoryResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// LinkOAuthAccount implements linkOAuthAccount operation.
//
// POST /oauth/link
func (UnimplementedHandler) LinkOAuthAccount(ctx context.Context, req *OAuthCallbackDto) (r *UserAdminResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// LockAuthSession implements lockAuthSession operation.
//
// POST /auth/session/lock
func (UnimplementedHandler) LockAuthSession(ctx context.Context) error {
	return ht.ErrNotImplemented
}

// LockSession implements lockSession operation.
//
// This endpoint requires the `session.lock` permission.
//
// POST /sessions/{id}/lock
func (UnimplementedHandler) LockSession(ctx context.Context, params LockSessionParams) error {
	return ht.ErrNotImplemented
}

// Login implements login operation.
//
// POST /auth/login
func (UnimplementedHandler) Login(ctx context.Context, req *LoginCredentialDto) (r *LoginResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// Logout implements logout operation.
//
// POST /auth/logout
func (UnimplementedHandler) Logout(ctx context.Context) (r *LogoutResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// MemoriesStatistics implements memoriesStatistics operation.
//
// This endpoint requires the `memory.statistics` permission.
//
// GET /memories/statistics
func (UnimplementedHandler) MemoriesStatistics(ctx context.Context, params MemoriesStatisticsParams) (r *MemoryStatisticsResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// MergePerson implements mergePerson operation.
//
// This endpoint requires the `person.merge` permission.
//
// POST /people/{id}/merge
func (UnimplementedHandler) MergePerson(ctx context.Context, req *MergePersonDto, params MergePersonParams) (r []BulkIdResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// PingServer implements pingServer operation.
//
// GET /server/ping
func (UnimplementedHandler) PingServer(ctx context.Context) (r *ServerPingResponse, _ error) {
	return r, ht.ErrNotImplemented
}

// PlayAssetVideo implements playAssetVideo operation.
//
// This endpoint requires the `asset.view` permission.
//
// GET /assets/{id}/video/playback
func (UnimplementedHandler) PlayAssetVideo(ctx context.Context, params PlayAssetVideoParams) (r PlayAssetVideoOK, _ error) {
	return r, ht.ErrNotImplemented
}

// ReassignFaces implements reassignFaces operation.
//
// This endpoint requires the `person.reassign` permission.
//
// PUT /people/{id}/reassign
func (UnimplementedHandler) ReassignFaces(ctx context.Context, req *AssetFaceUpdateDto, params ReassignFacesParams) (r []PersonResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// ReassignFacesById implements reassignFacesById operation.
//
// This endpoint requires the `face.update` permission.
//
// PUT /faces/{id}
func (UnimplementedHandler) ReassignFacesById(ctx context.Context, req *FaceDto, params ReassignFacesByIdParams) (r *PersonResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// RedirectOAuthToMobile implements redirectOAuthToMobile operation.
//
// GET /oauth/mobile-redirect
func (UnimplementedHandler) RedirectOAuthToMobile(ctx context.Context) error {
	return ht.ErrNotImplemented
}

// RemoveAssetFromAlbum implements removeAssetFromAlbum operation.
//
// This endpoint requires the `albumAsset.delete` permission.
//
// DELETE /albums/{id}/assets
func (UnimplementedHandler) RemoveAssetFromAlbum(ctx context.Context, req *BulkIdsDto, params RemoveAssetFromAlbumParams) (r []BulkIdResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// RemoveAssetFromStack implements removeAssetFromStack operation.
//
// This endpoint requires the `stack.update` permission.
//
// DELETE /stacks/{id}/assets/{assetId}
func (UnimplementedHandler) RemoveAssetFromStack(ctx context.Context, params RemoveAssetFromStackParams) error {
	return ht.ErrNotImplemented
}

// RemoveMemoryAssets implements removeMemoryAssets operation.
//
// This endpoint requires the `memoryAsset.delete` permission.
//
// DELETE /memories/{id}/assets
func (UnimplementedHandler) RemoveMemoryAssets(ctx context.Context, req *BulkIdsDto, params RemoveMemoryAssetsParams) (r []BulkIdResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// RemovePartner implements removePartner operation.
//
// This endpoint requires the `partner.delete` permission.
//
// DELETE /partners/{id}
func (UnimplementedHandler) RemovePartner(ctx context.Context, params RemovePartnerParams) error {
	return ht.ErrNotImplemented
}

// RemoveSharedLink implements removeSharedLink operation.
//
// This endpoint requires the `sharedLink.delete` permission.
//
// DELETE /shared-links/{id}
func (UnimplementedHandler) RemoveSharedLink(ctx context.Context, params RemoveSharedLinkParams) error {
	return ht.ErrNotImplemented
}

// RemoveSharedLinkAssets implements removeSharedLinkAssets operation.
//
// DELETE /shared-links/{id}/assets
func (UnimplementedHandler) RemoveSharedLinkAssets(ctx context.Context, req *AssetIdsDto, params RemoveSharedLinkAssetsParams) (r []AssetIdsResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// RemoveUserFromAlbum implements removeUserFromAlbum operation.
//
// This endpoint requires the `albumUser.delete` permission.
//
// DELETE /albums/{id}/user/{userId}
func (UnimplementedHandler) RemoveUserFromAlbum(ctx context.Context, params RemoveUserFromAlbumParams) error {
	return ht.ErrNotImplemented
}

// ReplaceAsset implements replaceAsset operation.
//
// This property was deprecated in v1.142.0. Replace the asset with new file, without changing its id.
//
//	This endpoint requires the `asset.replace` permission.
//
// Deprecated: schema marks this operation as deprecated.
//
// PUT /assets/{id}/original
func (UnimplementedHandler) ReplaceAsset(ctx context.Context, req *AssetMediaReplaceDtoMultipart, params ReplaceAssetParams) (r *AssetMediaResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// ResetPinCode implements resetPinCode operation.
//
// This endpoint requires the `pinCode.delete` permission.
//
// DELETE /auth/pin-code
func (UnimplementedHandler) ResetPinCode(ctx context.Context, req *PinCodeResetDto) error {
	return ht.ErrNotImplemented
}

// RestoreAssets implements restoreAssets operation.
//
// This endpoint requires the `asset.delete` permission.
//
// POST /trash/restore/assets
func (UnimplementedHandler) RestoreAssets(ctx context.Context, req *BulkIdsDto) (r *TrashResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// RestoreTrash implements restoreTrash operation.
//
// This endpoint requires the `asset.delete` permission.
//
// POST /trash/restore
func (UnimplementedHandler) RestoreTrash(ctx context.Context) (r *TrashResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// RestoreUserAdmin implements restoreUserAdmin operation.
//
// This endpoint is an admin-only route, and requires the `adminUser.delete` permission.
//
// POST /admin/users/{id}/restore
func (UnimplementedHandler) RestoreUserAdmin(ctx context.Context, params RestoreUserAdminParams) (r *UserAdminResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// ReverseGeocode implements reverseGeocode operation.
//
// GET /map/reverse-geocode
func (UnimplementedHandler) ReverseGeocode(ctx context.Context, params ReverseGeocodeParams) (r []MapReverseGeocodeResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// RunAssetJobs implements runAssetJobs operation.
//
// POST /assets/jobs
func (UnimplementedHandler) RunAssetJobs(ctx context.Context, req *AssetJobsDto) error {
	return ht.ErrNotImplemented
}

// ScanLibrary implements scanLibrary operation.
//
// This endpoint is an admin-only route, and requires the `library.update` permission.
//
// POST /libraries/{id}/scan
func (UnimplementedHandler) ScanLibrary(ctx context.Context, params ScanLibraryParams) error {
	return ht.ErrNotImplemented
}

// SearchAssetStatistics implements searchAssetStatistics operation.
//
// This endpoint requires the `asset.statistics` permission.
//
// POST /search/statistics
func (UnimplementedHandler) SearchAssetStatistics(ctx context.Context, req *StatisticsSearchDto) (r *SearchStatisticsResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// SearchAssets implements searchAssets operation.
//
// This endpoint requires the `asset.read` permission.
//
// POST /search/metadata
func (UnimplementedHandler) SearchAssets(ctx context.Context, req *MetadataSearchDto) (r *SearchResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// SearchLargeAssets implements searchLargeAssets operation.
//
// This endpoint requires the `asset.read` permission.
//
// POST /search/large-assets
func (UnimplementedHandler) SearchLargeAssets(ctx context.Context, params SearchLargeAssetsParams) (r []AssetResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// SearchMemories implements searchMemories operation.
//
// This endpoint requires the `memory.read` permission.
//
// GET /memories
func (UnimplementedHandler) SearchMemories(ctx context.Context, params SearchMemoriesParams) (r []MemoryResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// SearchPerson implements searchPerson operation.
//
// This endpoint requires the `person.read` permission.
//
// GET /search/person
func (UnimplementedHandler) SearchPerson(ctx context.Context, params SearchPersonParams) (r []PersonResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// SearchPlaces implements searchPlaces operation.
//
// This endpoint requires the `asset.read` permission.
//
// GET /search/places
func (UnimplementedHandler) SearchPlaces(ctx context.Context, params SearchPlacesParams) (r []PlacesResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// SearchRandom implements searchRandom operation.
//
// This endpoint requires the `asset.read` permission.
//
// POST /search/random
func (UnimplementedHandler) SearchRandom(ctx context.Context, req *RandomSearchDto) (r []AssetResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// SearchSmart implements searchSmart operation.
//
// This endpoint requires the `asset.read` permission.
//
// POST /search/smart
func (UnimplementedHandler) SearchSmart(ctx context.Context, req *SmartSearchDto) (r *SearchResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// SearchStacks implements searchStacks operation.
//
// This endpoint requires the `stack.read` permission.
//
// GET /stacks
func (UnimplementedHandler) SearchStacks(ctx context.Context, params SearchStacksParams) (r []StackResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// SearchUsers implements searchUsers operation.
//
// This endpoint requires the `user.read` permission.
//
// GET /users
func (UnimplementedHandler) SearchUsers(ctx context.Context) (r []UserResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// SearchUsersAdmin implements searchUsersAdmin operation.
//
// This endpoint is an admin-only route, and requires the `adminUser.read` permission.
//
// GET /admin/users
func (UnimplementedHandler) SearchUsersAdmin(ctx context.Context, params SearchUsersAdminParams) (r []UserAdminResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// SendJobCommand implements sendJobCommand operation.
//
// This endpoint is an admin-only route, and requires the `job.create` permission.
//
// PUT /jobs/{id}
func (UnimplementedHandler) SendJobCommand(ctx context.Context, req *JobCommandDto, params SendJobCommandParams) (r *JobStatusDto, _ error) {
	return r, ht.ErrNotImplemented
}

// SendSyncAck implements sendSyncAck operation.
//
// This endpoint requires the `syncCheckpoint.update` permission.
//
// POST /sync/ack
func (UnimplementedHandler) SendSyncAck(ctx context.Context, req *SyncAckSetDto) error {
	return ht.ErrNotImplemented
}

// SendTestEmailAdmin implements sendTestEmailAdmin operation.
//
// POST /admin/notifications/test-email
func (UnimplementedHandler) SendTestEmailAdmin(ctx context.Context, req *SystemConfigSmtpDto) (r *TestEmailResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// SetServerLicense implements setServerLicense operation.
//
// This endpoint is an admin-only route, and requires the `serverLicense.update` permission.
//
// PUT /server/license
func (UnimplementedHandler) SetServerLicense(ctx context.Context, req *LicenseKeyDto) (r *LicenseResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// SetUserLicense implements setUserLicense operation.
//
// This endpoint requires the `userLicense.update` permission.
//
// PUT /users/me/license
func (UnimplementedHandler) SetUserLicense(ctx context.Context, req *LicenseKeyDto) (r *LicenseResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// SetUserOnboarding implements setUserOnboarding operation.
//
// This endpoint requires the `userOnboarding.update` permission.
//
// PUT /users/me/onboarding
func (UnimplementedHandler) SetUserOnboarding(ctx context.Context, req *OnboardingDto) (r *OnboardingResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// SetupPinCode implements setupPinCode operation.
//
// This endpoint requires the `pinCode.create` permission.
//
// POST /auth/pin-code
func (UnimplementedHandler) SetupPinCode(ctx context.Context, req *PinCodeSetupDto) error {
	return ht.ErrNotImplemented
}

// SignUpAdmin implements signUpAdmin operation.
//
// POST /auth/admin-sign-up
func (UnimplementedHandler) SignUpAdmin(ctx context.Context, req *SignUpDto) (r *UserAdminResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// StartOAuth implements startOAuth operation.
//
// POST /oauth/authorize
func (UnimplementedHandler) StartOAuth(ctx context.Context, req *OAuthConfigDto) (r *OAuthAuthorizeResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// TagAssets implements tagAssets operation.
//
// This endpoint requires the `tag.asset` permission.
//
// PUT /tags/{id}/assets
func (UnimplementedHandler) TagAssets(ctx context.Context, req *BulkIdsDto, params TagAssetsParams) (r []BulkIdResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// UnlinkAllOAuthAccountsAdmin implements unlinkAllOAuthAccountsAdmin operation.
//
// This endpoint is an admin-only route, and requires the `adminAuth.unlinkAll` permission.
//
// POST /admin/auth/unlink-all
func (UnimplementedHandler) UnlinkAllOAuthAccountsAdmin(ctx context.Context) error {
	return ht.ErrNotImplemented
}

// UnlinkOAuthAccount implements unlinkOAuthAccount operation.
//
// POST /oauth/unlink
func (UnimplementedHandler) UnlinkOAuthAccount(ctx context.Context) (r *UserAdminResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// UnlockAuthSession implements unlockAuthSession operation.
//
// POST /auth/session/unlock
func (UnimplementedHandler) UnlockAuthSession(ctx context.Context, req *SessionUnlockDto) error {
	return ht.ErrNotImplemented
}

// UntagAssets implements untagAssets operation.
//
// This endpoint requires the `tag.asset` permission.
//
// DELETE /tags/{id}/assets
func (UnimplementedHandler) UntagAssets(ctx context.Context, req *BulkIdsDto, params UntagAssetsParams) (r []BulkIdResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// UpdateAdminOnboarding implements updateAdminOnboarding operation.
//
// This endpoint is an admin-only route, and requires the `systemMetadata.update` permission.
//
// POST /system-metadata/admin-onboarding
func (UnimplementedHandler) UpdateAdminOnboarding(ctx context.Context, req *AdminOnboardingUpdateDto) error {
	return ht.ErrNotImplemented
}

// UpdateAlbumInfo implements updateAlbumInfo operation.
//
// This endpoint requires the `album.update` permission.
//
// PATCH /albums/{id}
func (UnimplementedHandler) UpdateAlbumInfo(ctx context.Context, req *UpdateAlbumDto, params UpdateAlbumInfoParams) (r *AlbumResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// UpdateAlbumUser implements updateAlbumUser operation.
//
// This endpoint requires the `albumUser.update` permission.
//
// PUT /albums/{id}/user/{userId}
func (UnimplementedHandler) UpdateAlbumUser(ctx context.Context, req *UpdateAlbumUserDto, params UpdateAlbumUserParams) error {
	return ht.ErrNotImplemented
}

// UpdateApiKey implements updateApiKey operation.
//
// This endpoint requires the `apiKey.update` permission.
//
// PUT /api-keys/{id}
func (UnimplementedHandler) UpdateApiKey(ctx context.Context, req *APIKeyUpdateDto, params UpdateApiKeyParams) (r *APIKeyResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// UpdateAsset implements updateAsset operation.
//
// This endpoint requires the `asset.update` permission.
//
// PUT /assets/{id}
func (UnimplementedHandler) UpdateAsset(ctx context.Context, req *UpdateAssetDto, params UpdateAssetParams) (r *AssetResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// UpdateAssetMetadata implements updateAssetMetadata operation.
//
// This endpoint requires the `asset.update` permission.
//
// PUT /assets/{id}/metadata
func (UnimplementedHandler) UpdateAssetMetadata(ctx context.Context, req *AssetMetadataUpsertDto, params UpdateAssetMetadataParams) (r []AssetMetadataResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// UpdateAssets implements updateAssets operation.
//
// This endpoint requires the `asset.update` permission.
//
// PUT /assets
func (UnimplementedHandler) UpdateAssets(ctx context.Context, req *AssetBulkUpdateDto) error {
	return ht.ErrNotImplemented
}

// UpdateConfig implements updateConfig operation.
//
// This endpoint is an admin-only route, and requires the `systemConfig.update` permission.
//
// PUT /system-config
func (UnimplementedHandler) UpdateConfig(ctx context.Context, req *SystemConfigDto) (r *SystemConfigDto, _ error) {
	return r, ht.ErrNotImplemented
}

// UpdateLibrary implements updateLibrary operation.
//
// This endpoint is an admin-only route, and requires the `library.update` permission.
//
// PUT /libraries/{id}
func (UnimplementedHandler) UpdateLibrary(ctx context.Context, req *UpdateLibraryDto, params UpdateLibraryParams) (r *LibraryResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// UpdateMemory implements updateMemory operation.
//
// This endpoint requires the `memory.update` permission.
//
// PUT /memories/{id}
func (UnimplementedHandler) UpdateMemory(ctx context.Context, req *MemoryUpdateDto, params UpdateMemoryParams) (r *MemoryResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// UpdateMyPreferences implements updateMyPreferences operation.
//
// This endpoint requires the `userPreference.update` permission.
//
// PUT /users/me/preferences
func (UnimplementedHandler) UpdateMyPreferences(ctx context.Context, req *UserPreferencesUpdateDto) (r *UserPreferencesResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// UpdateMyUser implements updateMyUser operation.
//
// This endpoint requires the `user.update` permission.
//
// PUT /users/me
func (UnimplementedHandler) UpdateMyUser(ctx context.Context, req *UserUpdateMeDto) (r *UserAdminResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// UpdateNotification implements updateNotification operation.
//
// This endpoint requires the `notification.update` permission.
//
// PUT /notifications/{id}
func (UnimplementedHandler) UpdateNotification(ctx context.Context, req *NotificationUpdateDto, params UpdateNotificationParams) (r *NotificationDto, _ error) {
	return r, ht.ErrNotImplemented
}

// UpdateNotifications implements updateNotifications operation.
//
// This endpoint requires the `notification.update` permission.
//
// PUT /notifications
func (UnimplementedHandler) UpdateNotifications(ctx context.Context, req *NotificationUpdateAllDto) error {
	return ht.ErrNotImplemented
}

// UpdatePartner implements updatePartner operation.
//
// This endpoint requires the `partner.update` permission.
//
// PUT /partners/{id}
func (UnimplementedHandler) UpdatePartner(ctx context.Context, req *PartnerUpdateDto, params UpdatePartnerParams) (r *PartnerResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// UpdatePeople implements updatePeople operation.
//
// This endpoint requires the `person.update` permission.
//
// PUT /people
func (UnimplementedHandler) UpdatePeople(ctx context.Context, req *PeopleUpdateDto) (r []BulkIdResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// UpdatePerson implements updatePerson operation.
//
// This endpoint requires the `person.update` permission.
//
// PUT /people/{id}
func (UnimplementedHandler) UpdatePerson(ctx context.Context, req *PersonUpdateDto, params UpdatePersonParams) (r *PersonResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// UpdateSession implements updateSession operation.
//
// This endpoint requires the `session.update` permission.
//
// PUT /sessions/{id}
func (UnimplementedHandler) UpdateSession(ctx context.Context, req *SessionUpdateDto, params UpdateSessionParams) (r *SessionResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// UpdateSharedLink implements updateSharedLink operation.
//
// This endpoint requires the `sharedLink.update` permission.
//
// PATCH /shared-links/{id}
func (UnimplementedHandler) UpdateSharedLink(ctx context.Context, req *SharedLinkEditDto, params UpdateSharedLinkParams) (r *SharedLinkResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// UpdateStack implements updateStack operation.
//
// This endpoint requires the `stack.update` permission.
//
// PUT /stacks/{id}
func (UnimplementedHandler) UpdateStack(ctx context.Context, req *StackUpdateDto, params UpdateStackParams) (r *StackResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// UpdateTag implements updateTag operation.
//
// This endpoint requires the `tag.update` permission.
//
// PUT /tags/{id}
func (UnimplementedHandler) UpdateTag(ctx context.Context, req *TagUpdateDto, params UpdateTagParams) (r *TagResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// UpdateUserAdmin implements updateUserAdmin operation.
//
// This endpoint is an admin-only route, and requires the `adminUser.update` permission.
//
// PUT /admin/users/{id}
func (UnimplementedHandler) UpdateUserAdmin(ctx context.Context, req *UserAdminUpdateDto, params UpdateUserAdminParams) (r *UserAdminResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// UpdateUserPreferencesAdmin implements updateUserPreferencesAdmin operation.
//
// This endpoint is an admin-only route, and requires the `adminUser.update` permission.
//
// PUT /admin/users/{id}/preferences
func (UnimplementedHandler) UpdateUserPreferencesAdmin(ctx context.Context, req *UserPreferencesUpdateDto, params UpdateUserPreferencesAdminParams) (r *UserPreferencesResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// UploadAsset implements uploadAsset operation.
//
// This endpoint requires the `asset.upload` permission.
//
// POST /assets
func (UnimplementedHandler) UploadAsset(ctx context.Context, req *AssetMediaCreateDtoMultipart, params UploadAssetParams) (r *AssetMediaResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// UpsertTags implements upsertTags operation.
//
// This endpoint requires the `tag.create` permission.
//
// PUT /tags
func (UnimplementedHandler) UpsertTags(ctx context.Context, req *TagUpsertDto) (r []TagResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// Validate implements validate operation.
//
// POST /libraries/{id}/validate
func (UnimplementedHandler) Validate(ctx context.Context, req *ValidateLibraryDto, params ValidateParams) (r *ValidateLibraryResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// ValidateAccessToken implements validateAccessToken operation.
//
// POST /auth/validateToken
func (UnimplementedHandler) ValidateAccessToken(ctx context.Context) (r *ValidateAccessTokenResponseDto, _ error) {
	return r, ht.ErrNotImplemented
}

// ViewAsset implements viewAsset operation.
//
// This endpoint requires the `asset.view` permission.
//
// GET /assets/{id}/thumbnail
func (UnimplementedHandler) ViewAsset(ctx context.Context, params ViewAssetParams) (r ViewAssetOK, _ error) {
	return r, ht.ErrNotImplemented
}
