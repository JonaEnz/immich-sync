// Code generated by ogen, DO NOT EDIT.

package oapi

import (
	"net/http"
	"net/url"
	"strings"

	"github.com/ogen-go/ogen/uri"
)

func (s *Server) cutPrefix(path string) (string, bool) {
	prefix := s.cfg.Prefix
	if prefix == "" {
		return path, true
	}
	if !strings.HasPrefix(path, prefix) {
		// Prefix doesn't match.
		return "", false
	}
	// Cut prefix from the path.
	return strings.TrimPrefix(path, prefix), true
}

// ServeHTTP serves http request as defined by OpenAPI v3 specification,
// calling handler that matches the path or returning not found error.
func (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	elem := r.URL.Path
	elemIsEscaped := false
	if rawPath := r.URL.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
			elemIsEscaped = strings.ContainsRune(elem, '%')
		}
	}

	elem, ok := s.cutPrefix(elem)
	if !ok || len(elem) == 0 {
		s.notFound(w, r)
		return
	}
	args := [2]string{}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			origElem := elem
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'a': // Prefix: "a"
				origElem := elem
				if l := len("a"); len(elem) >= l && elem[0:l] == "a" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'c': // Prefix: "ctivities"
					origElem := elem
					if l := len("ctivities"); len(elem) >= l && elem[0:l] == "ctivities" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleGetActivitiesRequest([0]string{}, elemIsEscaped, w, r)
						case "POST":
							s.handleCreateActivityRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET,POST")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 's': // Prefix: "statistics"
							origElem := elem
							if l := len("statistics"); len(elem) >= l && elem[0:l] == "statistics" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleGetActivityStatisticsRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}

							elem = origElem
						}
						// Param: "id"
						// Leaf parameter
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "DELETE":
								s.handleDeleteActivityRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "DELETE")
							}

							return
						}

						elem = origElem
					}

					elem = origElem
				case 'd': // Prefix: "dmin/users"
					origElem := elem
					if l := len("dmin/users"); len(elem) >= l && elem[0:l] == "dmin/users" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleSearchUsersAdminRequest([0]string{}, elemIsEscaped, w, r)
						case "POST":
							s.handleCreateUserAdminRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET,POST")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "id"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch r.Method {
							case "DELETE":
								s.handleDeleteUserAdminRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							case "GET":
								s.handleGetUserAdminRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							case "PUT":
								s.handleUpdateUserAdminRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "DELETE,GET,PUT")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							origElem := elem
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'p': // Prefix: "preferences"
								origElem := elem
								if l := len("preferences"); len(elem) >= l && elem[0:l] == "preferences" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleGetUserPreferencesAdminRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									case "PUT":
										s.handleUpdateUserPreferencesAdminRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET,PUT")
									}

									return
								}

								elem = origElem
							case 'r': // Prefix: "restore"
								origElem := elem
								if l := len("restore"); len(elem) >= l && elem[0:l] == "restore" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "POST":
										s.handleRestoreUserAdminRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				case 'l': // Prefix: "lbums"
					origElem := elem
					if l := len("lbums"); len(elem) >= l && elem[0:l] == "lbums" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleGetAllAlbumsRequest([0]string{}, elemIsEscaped, w, r)
						case "POST":
							s.handleCreateAlbumRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET,POST")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 's': // Prefix: "statistics"
							origElem := elem
							if l := len("statistics"); len(elem) >= l && elem[0:l] == "statistics" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleGetAlbumStatisticsRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}

							elem = origElem
						}
						// Param: "id"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch r.Method {
							case "DELETE":
								s.handleDeleteAlbumRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							case "GET":
								s.handleGetAlbumInfoRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							case "PATCH":
								s.handleUpdateAlbumInfoRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "DELETE,GET,PATCH")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							origElem := elem
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'a': // Prefix: "assets"
								origElem := elem
								if l := len("assets"); len(elem) >= l && elem[0:l] == "assets" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "DELETE":
										s.handleRemoveAssetFromAlbumRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									case "PUT":
										s.handleAddAssetsToAlbumRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "DELETE,PUT")
									}

									return
								}

								elem = origElem
							case 'u': // Prefix: "user"
								origElem := elem
								if l := len("user"); len(elem) >= l && elem[0:l] == "user" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case '/': // Prefix: "/"
									origElem := elem
									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "userId"
									// Leaf parameter
									args[1] = elem
									elem = ""

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "DELETE":
											s.handleRemoveUserFromAlbumRequest([2]string{
												args[0],
												args[1],
											}, elemIsEscaped, w, r)
										case "PUT":
											s.handleUpdateAlbumUserRequest([2]string{
												args[0],
												args[1],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "DELETE,PUT")
										}

										return
									}

									elem = origElem
								case 's': // Prefix: "s"
									origElem := elem
									if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "PUT":
											s.handleAddUsersToAlbumRequest([1]string{
												args[0],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "PUT")
										}

										return
									}

									elem = origElem
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				case 'p': // Prefix: "pi-keys"
					origElem := elem
					if l := len("pi-keys"); len(elem) >= l && elem[0:l] == "pi-keys" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleGetApiKeysRequest([0]string{}, elemIsEscaped, w, r)
						case "POST":
							s.handleCreateApiKeyRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET,POST")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "id"
						// Leaf parameter
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "DELETE":
								s.handleDeleteApiKeyRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							case "GET":
								s.handleGetApiKeyRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							case "PUT":
								s.handleUpdateApiKeyRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "DELETE,GET,PUT")
							}

							return
						}

						elem = origElem
					}

					elem = origElem
				case 's': // Prefix: "ssets"
					origElem := elem
					if l := len("ssets"); len(elem) >= l && elem[0:l] == "ssets" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "DELETE":
							s.handleDeleteAssetsRequest([0]string{}, elemIsEscaped, w, r)
						case "POST":
							s.handleUploadAssetRequest([0]string{}, elemIsEscaped, w, r)
						case "PUT":
							s.handleUpdateAssetsRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "DELETE,POST,PUT")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'b': // Prefix: "bulk-upload-check"
							origElem := elem
							if l := len("bulk-upload-check"); len(elem) >= l && elem[0:l] == "bulk-upload-check" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleCheckBulkUploadRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}

							elem = origElem
						case 'd': // Prefix: "device/"
							origElem := elem
							if l := len("device/"); len(elem) >= l && elem[0:l] == "device/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "deviceId"
							// Leaf parameter
							args[0] = elem
							elem = ""

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleGetAllUserAssetsByDeviceIdRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}

							elem = origElem
						case 'e': // Prefix: "exist"
							origElem := elem
							if l := len("exist"); len(elem) >= l && elem[0:l] == "exist" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleCheckExistingAssetsRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}

							elem = origElem
						case 'j': // Prefix: "jobs"
							origElem := elem
							if l := len("jobs"); len(elem) >= l && elem[0:l] == "jobs" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleRunAssetJobsRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}

							elem = origElem
						case 'm': // Prefix: "memory-lane"
							origElem := elem
							if l := len("memory-lane"); len(elem) >= l && elem[0:l] == "memory-lane" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleGetMemoryLaneRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}

							elem = origElem
						case 'r': // Prefix: "random"
							origElem := elem
							if l := len("random"); len(elem) >= l && elem[0:l] == "random" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleGetRandomRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}

							elem = origElem
						case 's': // Prefix: "statistics"
							origElem := elem
							if l := len("statistics"); len(elem) >= l && elem[0:l] == "statistics" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleGetAssetStatisticsRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}

							elem = origElem
						}
						// Param: "id"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch r.Method {
							case "GET":
								s.handleGetAssetInfoRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							case "PUT":
								s.handleUpdateAssetRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET,PUT")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							origElem := elem
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'o': // Prefix: "original"
								origElem := elem
								if l := len("original"); len(elem) >= l && elem[0:l] == "original" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleDownloadAssetRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									case "PUT":
										s.handleReplaceAssetRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET,PUT")
									}

									return
								}

								elem = origElem
							case 't': // Prefix: "thumbnail"
								origElem := elem
								if l := len("thumbnail"); len(elem) >= l && elem[0:l] == "thumbnail" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleViewAssetRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}

								elem = origElem
							case 'v': // Prefix: "video/playback"
								origElem := elem
								if l := len("video/playback"); len(elem) >= l && elem[0:l] == "video/playback" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handlePlayAssetVideoRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				case 'u': // Prefix: "u"
					origElem := elem
					if l := len("u"); len(elem) >= l && elem[0:l] == "u" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'd': // Prefix: "dit/deletes"
						origElem := elem
						if l := len("dit/deletes"); len(elem) >= l && elem[0:l] == "dit/deletes" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleGetAuditDeletesRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}

						elem = origElem
					case 't': // Prefix: "th/"
						origElem := elem
						if l := len("th/"); len(elem) >= l && elem[0:l] == "th/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'a': // Prefix: "admin-sign-up"
							origElem := elem
							if l := len("admin-sign-up"); len(elem) >= l && elem[0:l] == "admin-sign-up" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleSignUpAdminRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}

							elem = origElem
						case 'c': // Prefix: "change-password"
							origElem := elem
							if l := len("change-password"); len(elem) >= l && elem[0:l] == "change-password" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleChangePasswordRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}

							elem = origElem
						case 'l': // Prefix: "log"
							origElem := elem
							if l := len("log"); len(elem) >= l && elem[0:l] == "log" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'i': // Prefix: "in"
								origElem := elem
								if l := len("in"); len(elem) >= l && elem[0:l] == "in" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "POST":
										s.handleLoginRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}

								elem = origElem
							case 'o': // Prefix: "out"
								origElem := elem
								if l := len("out"); len(elem) >= l && elem[0:l] == "out" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "POST":
										s.handleLogoutRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}

								elem = origElem
							}

							elem = origElem
						case 'v': // Prefix: "validateToken"
							origElem := elem
							if l := len("validateToken"); len(elem) >= l && elem[0:l] == "validateToken" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleValidateAccessTokenRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 'd': // Prefix: "d"
				origElem := elem
				if l := len("d"); len(elem) >= l && elem[0:l] == "d" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'o': // Prefix: "ownload/"
					origElem := elem
					if l := len("ownload/"); len(elem) >= l && elem[0:l] == "ownload/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'a': // Prefix: "archive"
						origElem := elem
						if l := len("archive"); len(elem) >= l && elem[0:l] == "archive" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleDownloadArchiveRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}

						elem = origElem
					case 'i': // Prefix: "info"
						origElem := elem
						if l := len("info"); len(elem) >= l && elem[0:l] == "info" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleGetDownloadInfoRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}

						elem = origElem
					}

					elem = origElem
				case 'u': // Prefix: "uplicates"
					origElem := elem
					if l := len("uplicates"); len(elem) >= l && elem[0:l] == "uplicates" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "GET":
							s.handleGetAssetDuplicatesRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}

					elem = origElem
				}

				elem = origElem
			case 'f': // Prefix: "faces"
				origElem := elem
				if l := len("faces"); len(elem) >= l && elem[0:l] == "faces" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleGetFacesRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					origElem := elem
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Leaf parameter
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "PUT":
							s.handleReassignFacesByIdRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "PUT")
						}

						return
					}

					elem = origElem
				}

				elem = origElem
			case 'j': // Prefix: "jobs"
				origElem := elem
				if l := len("jobs"); len(elem) >= l && elem[0:l] == "jobs" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleGetAllJobsStatusRequest([0]string{}, elemIsEscaped, w, r)
					case "POST":
						s.handleCreateJobRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET,POST")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					origElem := elem
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Leaf parameter
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "PUT":
							s.handleSendJobCommandRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "PUT")
						}

						return
					}

					elem = origElem
				}

				elem = origElem
			case 'l': // Prefix: "libraries"
				origElem := elem
				if l := len("libraries"); len(elem) >= l && elem[0:l] == "libraries" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleGetAllLibrariesRequest([0]string{}, elemIsEscaped, w, r)
					case "POST":
						s.handleCreateLibraryRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET,POST")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					origElem := elem
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch r.Method {
						case "DELETE":
							s.handleDeleteLibraryRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						case "GET":
							s.handleGetLibraryRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						case "PUT":
							s.handleUpdateLibraryRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "DELETE,GET,PUT")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 's': // Prefix: "s"
							origElem := elem
							if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'c': // Prefix: "can"
								origElem := elem
								if l := len("can"); len(elem) >= l && elem[0:l] == "can" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "POST":
										s.handleScanLibraryRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}

								elem = origElem
							case 't': // Prefix: "tatistics"
								origElem := elem
								if l := len("tatistics"); len(elem) >= l && elem[0:l] == "tatistics" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleGetLibraryStatisticsRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}

								elem = origElem
							}

							elem = origElem
						case 'v': // Prefix: "validate"
							origElem := elem
							if l := len("validate"); len(elem) >= l && elem[0:l] == "validate" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleValidateRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 'm': // Prefix: "m"
				origElem := elem
				if l := len("m"); len(elem) >= l && elem[0:l] == "m" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'a': // Prefix: "ap/"
					origElem := elem
					if l := len("ap/"); len(elem) >= l && elem[0:l] == "ap/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'm': // Prefix: "markers"
						origElem := elem
						if l := len("markers"); len(elem) >= l && elem[0:l] == "markers" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleGetMapMarkersRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}

						elem = origElem
					case 'r': // Prefix: "reverse-geocode"
						origElem := elem
						if l := len("reverse-geocode"); len(elem) >= l && elem[0:l] == "reverse-geocode" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleReverseGeocodeRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}

						elem = origElem
					}

					elem = origElem
				case 'e': // Prefix: "emories"
					origElem := elem
					if l := len("emories"); len(elem) >= l && elem[0:l] == "emories" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleSearchMemoriesRequest([0]string{}, elemIsEscaped, w, r)
						case "POST":
							s.handleCreateMemoryRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET,POST")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "id"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch r.Method {
							case "DELETE":
								s.handleDeleteMemoryRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							case "GET":
								s.handleGetMemoryRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							case "PUT":
								s.handleUpdateMemoryRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "DELETE,GET,PUT")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/assets"
							origElem := elem
							if l := len("/assets"); len(elem) >= l && elem[0:l] == "/assets" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "DELETE":
									s.handleRemoveMemoryAssetsRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								case "PUT":
									s.handleAddMemoryAssetsRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "DELETE,PUT")
								}

								return
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 'n': // Prefix: "notifications/test-email"
				origElem := elem
				if l := len("notifications/test-email"); len(elem) >= l && elem[0:l] == "notifications/test-email" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "POST":
						s.handleSendTestEmailRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "POST")
					}

					return
				}

				elem = origElem
			case 'o': // Prefix: "oauth/"
				origElem := elem
				if l := len("oauth/"); len(elem) >= l && elem[0:l] == "oauth/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'a': // Prefix: "authorize"
					origElem := elem
					if l := len("authorize"); len(elem) >= l && elem[0:l] == "authorize" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "POST":
							s.handleStartOAuthRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "POST")
						}

						return
					}

					elem = origElem
				case 'c': // Prefix: "callback"
					origElem := elem
					if l := len("callback"); len(elem) >= l && elem[0:l] == "callback" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "POST":
							s.handleFinishOAuthRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "POST")
						}

						return
					}

					elem = origElem
				case 'l': // Prefix: "link"
					origElem := elem
					if l := len("link"); len(elem) >= l && elem[0:l] == "link" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "POST":
							s.handleLinkOAuthAccountRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "POST")
						}

						return
					}

					elem = origElem
				case 'm': // Prefix: "mobile-redirect"
					origElem := elem
					if l := len("mobile-redirect"); len(elem) >= l && elem[0:l] == "mobile-redirect" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "GET":
							s.handleRedirectOAuthToMobileRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}

					elem = origElem
				case 'u': // Prefix: "unlink"
					origElem := elem
					if l := len("unlink"); len(elem) >= l && elem[0:l] == "unlink" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "POST":
							s.handleUnlinkOAuthAccountRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "POST")
						}

						return
					}

					elem = origElem
				}

				elem = origElem
			case 'p': // Prefix: "p"
				origElem := elem
				if l := len("p"); len(elem) >= l && elem[0:l] == "p" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'a': // Prefix: "artners"
					origElem := elem
					if l := len("artners"); len(elem) >= l && elem[0:l] == "artners" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleGetPartnersRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "id"
						// Leaf parameter
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "DELETE":
								s.handleRemovePartnerRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							case "POST":
								s.handleCreatePartnerRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							case "PUT":
								s.handleUpdatePartnerRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "DELETE,POST,PUT")
							}

							return
						}

						elem = origElem
					}

					elem = origElem
				case 'e': // Prefix: "eople"
					origElem := elem
					if l := len("eople"); len(elem) >= l && elem[0:l] == "eople" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleGetAllPeopleRequest([0]string{}, elemIsEscaped, w, r)
						case "POST":
							s.handleCreatePersonRequest([0]string{}, elemIsEscaped, w, r)
						case "PUT":
							s.handleUpdatePeopleRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET,POST,PUT")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "id"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch r.Method {
							case "GET":
								s.handleGetPersonRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							case "PUT":
								s.handleUpdatePersonRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET,PUT")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							origElem := elem
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'm': // Prefix: "merge"
								origElem := elem
								if l := len("merge"); len(elem) >= l && elem[0:l] == "merge" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "POST":
										s.handleMergePersonRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}

								elem = origElem
							case 'r': // Prefix: "reassign"
								origElem := elem
								if l := len("reassign"); len(elem) >= l && elem[0:l] == "reassign" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "PUT":
										s.handleReassignFacesRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "PUT")
									}

									return
								}

								elem = origElem
							case 's': // Prefix: "statistics"
								origElem := elem
								if l := len("statistics"); len(elem) >= l && elem[0:l] == "statistics" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleGetPersonStatisticsRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}

								elem = origElem
							case 't': // Prefix: "thumbnail"
								origElem := elem
								if l := len("thumbnail"); len(elem) >= l && elem[0:l] == "thumbnail" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleGetPersonThumbnailRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 'r': // Prefix: "reports"
				origElem := elem
				if l := len("reports"); len(elem) >= l && elem[0:l] == "reports" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleGetAuditFilesRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					origElem := elem
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'c': // Prefix: "checksum"
						origElem := elem
						if l := len("checksum"); len(elem) >= l && elem[0:l] == "checksum" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleGetFileChecksumsRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}

						elem = origElem
					case 'f': // Prefix: "fix"
						origElem := elem
						if l := len("fix"); len(elem) >= l && elem[0:l] == "fix" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleFixAuditFilesRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 's': // Prefix: "s"
				origElem := elem
				if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'e': // Prefix: "e"
					origElem := elem
					if l := len("e"); len(elem) >= l && elem[0:l] == "e" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'a': // Prefix: "arch/"
						origElem := elem
						if l := len("arch/"); len(elem) >= l && elem[0:l] == "arch/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'c': // Prefix: "cities"
							origElem := elem
							if l := len("cities"); len(elem) >= l && elem[0:l] == "cities" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleGetAssetsByCityRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}

							elem = origElem
						case 'e': // Prefix: "explore"
							origElem := elem
							if l := len("explore"); len(elem) >= l && elem[0:l] == "explore" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleGetExploreDataRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}

							elem = origElem
						case 'm': // Prefix: "metadata"
							origElem := elem
							if l := len("metadata"); len(elem) >= l && elem[0:l] == "metadata" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleSearchMetadataRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}

							elem = origElem
						case 'p': // Prefix: "p"
							origElem := elem
							if l := len("p"); len(elem) >= l && elem[0:l] == "p" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'e': // Prefix: "erson"
								origElem := elem
								if l := len("erson"); len(elem) >= l && elem[0:l] == "erson" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleSearchPersonRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}

								elem = origElem
							case 'l': // Prefix: "laces"
								origElem := elem
								if l := len("laces"); len(elem) >= l && elem[0:l] == "laces" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleSearchPlacesRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}

								elem = origElem
							}

							elem = origElem
						case 'r': // Prefix: "random"
							origElem := elem
							if l := len("random"); len(elem) >= l && elem[0:l] == "random" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleSearchRandomRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}

							elem = origElem
						case 's': // Prefix: "s"
							origElem := elem
							if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'm': // Prefix: "mart"
								origElem := elem
								if l := len("mart"); len(elem) >= l && elem[0:l] == "mart" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "POST":
										s.handleSearchSmartRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}

								elem = origElem
							case 'u': // Prefix: "uggestions"
								origElem := elem
								if l := len("uggestions"); len(elem) >= l && elem[0:l] == "uggestions" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleGetSearchSuggestionsRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					case 'r': // Prefix: "rver/"
						origElem := elem
						if l := len("rver/"); len(elem) >= l && elem[0:l] == "rver/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'a': // Prefix: "about"
							origElem := elem
							if l := len("about"); len(elem) >= l && elem[0:l] == "about" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleGetAboutInfoRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}

							elem = origElem
						case 'c': // Prefix: "config"
							origElem := elem
							if l := len("config"); len(elem) >= l && elem[0:l] == "config" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleGetServerConfigRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}

							elem = origElem
						case 'f': // Prefix: "features"
							origElem := elem
							if l := len("features"); len(elem) >= l && elem[0:l] == "features" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleGetServerFeaturesRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}

							elem = origElem
						case 'l': // Prefix: "license"
							origElem := elem
							if l := len("license"); len(elem) >= l && elem[0:l] == "license" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "DELETE":
									s.handleDeleteServerLicenseRequest([0]string{}, elemIsEscaped, w, r)
								case "GET":
									s.handleGetServerLicenseRequest([0]string{}, elemIsEscaped, w, r)
								case "PUT":
									s.handleSetServerLicenseRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "DELETE,GET,PUT")
								}

								return
							}

							elem = origElem
						case 'm': // Prefix: "media-types"
							origElem := elem
							if l := len("media-types"); len(elem) >= l && elem[0:l] == "media-types" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleGetSupportedMediaTypesRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}

							elem = origElem
						case 'p': // Prefix: "ping"
							origElem := elem
							if l := len("ping"); len(elem) >= l && elem[0:l] == "ping" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handlePingServerRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}

							elem = origElem
						case 's': // Prefix: "st"
							origElem := elem
							if l := len("st"); len(elem) >= l && elem[0:l] == "st" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'a': // Prefix: "atistics"
								origElem := elem
								if l := len("atistics"); len(elem) >= l && elem[0:l] == "atistics" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleGetServerStatisticsRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}

								elem = origElem
							case 'o': // Prefix: "orage"
								origElem := elem
								if l := len("orage"); len(elem) >= l && elem[0:l] == "orage" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleGetStorageRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}

								elem = origElem
							}

							elem = origElem
						case 't': // Prefix: "theme"
							origElem := elem
							if l := len("theme"); len(elem) >= l && elem[0:l] == "theme" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleGetThemeRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}

							elem = origElem
						case 'v': // Prefix: "version"
							origElem := elem
							if l := len("version"); len(elem) >= l && elem[0:l] == "version" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch r.Method {
								case "GET":
									s.handleGetServerVersionRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}
							switch elem[0] {
							case '-': // Prefix: "-history"
								origElem := elem
								if l := len("-history"); len(elem) >= l && elem[0:l] == "-history" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleGetVersionHistoryRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					case 's': // Prefix: "ssions"
						origElem := elem
						if l := len("ssions"); len(elem) >= l && elem[0:l] == "ssions" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch r.Method {
							case "DELETE":
								s.handleDeleteAllSessionsRequest([0]string{}, elemIsEscaped, w, r)
							case "GET":
								s.handleGetSessionsRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "DELETE,GET")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							origElem := elem
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "id"
							// Leaf parameter
							args[0] = elem
							elem = ""

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "DELETE":
									s.handleDeleteSessionRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "DELETE")
								}

								return
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				case 'h': // Prefix: "hared-links"
					origElem := elem
					if l := len("hared-links"); len(elem) >= l && elem[0:l] == "hared-links" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleGetAllSharedLinksRequest([0]string{}, elemIsEscaped, w, r)
						case "POST":
							s.handleCreateSharedLinkRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET,POST")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'm': // Prefix: "me"
							origElem := elem
							if l := len("me"); len(elem) >= l && elem[0:l] == "me" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleGetMySharedLinkRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}

							elem = origElem
						}
						// Param: "id"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch r.Method {
							case "DELETE":
								s.handleRemoveSharedLinkRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							case "GET":
								s.handleGetSharedLinkByIdRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							case "PATCH":
								s.handleUpdateSharedLinkRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "DELETE,GET,PATCH")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/assets"
							origElem := elem
							if l := len("/assets"); len(elem) >= l && elem[0:l] == "/assets" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "DELETE":
									s.handleRemoveSharedLinkAssetsRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								case "PUT":
									s.handleAddSharedLinkAssetsRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "DELETE,PUT")
								}

								return
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				case 't': // Prefix: "tacks"
					origElem := elem
					if l := len("tacks"); len(elem) >= l && elem[0:l] == "tacks" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "DELETE":
							s.handleDeleteStacksRequest([0]string{}, elemIsEscaped, w, r)
						case "GET":
							s.handleSearchStacksRequest([0]string{}, elemIsEscaped, w, r)
						case "POST":
							s.handleCreateStackRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "DELETE,GET,POST")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "id"
						// Leaf parameter
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "DELETE":
								s.handleDeleteStackRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							case "GET":
								s.handleGetStackRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							case "PUT":
								s.handleUpdateStackRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "DELETE,GET,PUT")
							}

							return
						}

						elem = origElem
					}

					elem = origElem
				case 'y': // Prefix: "y"
					origElem := elem
					if l := len("y"); len(elem) >= l && elem[0:l] == "y" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'n': // Prefix: "nc/"
						origElem := elem
						if l := len("nc/"); len(elem) >= l && elem[0:l] == "nc/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'd': // Prefix: "delta-sync"
							origElem := elem
							if l := len("delta-sync"); len(elem) >= l && elem[0:l] == "delta-sync" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleGetDeltaSyncRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}

							elem = origElem
						case 'f': // Prefix: "full-sync"
							origElem := elem
							if l := len("full-sync"); len(elem) >= l && elem[0:l] == "full-sync" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleGetFullSyncForUserRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}

							elem = origElem
						}

						elem = origElem
					case 's': // Prefix: "stem-"
						origElem := elem
						if l := len("stem-"); len(elem) >= l && elem[0:l] == "stem-" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'c': // Prefix: "config"
							origElem := elem
							if l := len("config"); len(elem) >= l && elem[0:l] == "config" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch r.Method {
								case "GET":
									s.handleGetConfigRequest([0]string{}, elemIsEscaped, w, r)
								case "PUT":
									s.handleUpdateConfigRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET,PUT")
								}

								return
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								origElem := elem
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'd': // Prefix: "defaults"
									origElem := elem
									if l := len("defaults"); len(elem) >= l && elem[0:l] == "defaults" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleGetConfigDefaultsRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}

									elem = origElem
								case 's': // Prefix: "storage-template-options"
									origElem := elem
									if l := len("storage-template-options"); len(elem) >= l && elem[0:l] == "storage-template-options" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleGetStorageTemplateOptionsRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}

									elem = origElem
								}

								elem = origElem
							}

							elem = origElem
						case 'm': // Prefix: "metadata/"
							origElem := elem
							if l := len("metadata/"); len(elem) >= l && elem[0:l] == "metadata/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'a': // Prefix: "admin-onboarding"
								origElem := elem
								if l := len("admin-onboarding"); len(elem) >= l && elem[0:l] == "admin-onboarding" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleGetAdminOnboardingRequest([0]string{}, elemIsEscaped, w, r)
									case "POST":
										s.handleUpdateAdminOnboardingRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET,POST")
									}

									return
								}

								elem = origElem
							case 'r': // Prefix: "reverse-geocoding-state"
								origElem := elem
								if l := len("reverse-geocoding-state"); len(elem) >= l && elem[0:l] == "reverse-geocoding-state" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleGetReverseGeocodingStateRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 't': // Prefix: "t"
				origElem := elem
				if l := len("t"); len(elem) >= l && elem[0:l] == "t" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'a': // Prefix: "ags"
					origElem := elem
					if l := len("ags"); len(elem) >= l && elem[0:l] == "ags" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleGetAllTagsRequest([0]string{}, elemIsEscaped, w, r)
						case "POST":
							s.handleCreateTagRequest([0]string{}, elemIsEscaped, w, r)
						case "PUT":
							s.handleUpsertTagsRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET,POST,PUT")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'a': // Prefix: "assets"
							origElem := elem
							if l := len("assets"); len(elem) >= l && elem[0:l] == "assets" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "PUT":
									s.handleBulkTagAssetsRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "PUT")
								}

								return
							}

							elem = origElem
						}
						// Param: "id"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch r.Method {
							case "DELETE":
								s.handleDeleteTagRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							case "GET":
								s.handleGetTagByIdRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							case "PUT":
								s.handleUpdateTagRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "DELETE,GET,PUT")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/assets"
							origElem := elem
							if l := len("/assets"); len(elem) >= l && elem[0:l] == "/assets" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "DELETE":
									s.handleUntagAssetsRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								case "PUT":
									s.handleTagAssetsRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "DELETE,PUT")
								}

								return
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				case 'i': // Prefix: "imeline/bucket"
					origElem := elem
					if l := len("imeline/bucket"); len(elem) >= l && elem[0:l] == "imeline/bucket" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleGetTimeBucketRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}
					switch elem[0] {
					case 's': // Prefix: "s"
						origElem := elem
						if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleGetTimeBucketsRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}

						elem = origElem
					}

					elem = origElem
				case 'r': // Prefix: "rash/"
					origElem := elem
					if l := len("rash/"); len(elem) >= l && elem[0:l] == "rash/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'e': // Prefix: "empty"
						origElem := elem
						if l := len("empty"); len(elem) >= l && elem[0:l] == "empty" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleEmptyTrashRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}

						elem = origElem
					case 'r': // Prefix: "restore"
						origElem := elem
						if l := len("restore"); len(elem) >= l && elem[0:l] == "restore" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch r.Method {
							case "POST":
								s.handleRestoreTrashRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/assets"
							origElem := elem
							if l := len("/assets"); len(elem) >= l && elem[0:l] == "/assets" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleRestoreAssetsRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 'u': // Prefix: "users"
				origElem := elem
				if l := len("users"); len(elem) >= l && elem[0:l] == "users" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleSearchUsersRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					origElem := elem
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'm': // Prefix: "me"
						origElem := elem
						if l := len("me"); len(elem) >= l && elem[0:l] == "me" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch r.Method {
							case "GET":
								s.handleGetMyUserRequest([0]string{}, elemIsEscaped, w, r)
							case "PUT":
								s.handleUpdateMyUserRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET,PUT")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							origElem := elem
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'l': // Prefix: "license"
								origElem := elem
								if l := len("license"); len(elem) >= l && elem[0:l] == "license" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "DELETE":
										s.handleDeleteUserLicenseRequest([0]string{}, elemIsEscaped, w, r)
									case "GET":
										s.handleGetUserLicenseRequest([0]string{}, elemIsEscaped, w, r)
									case "PUT":
										s.handleSetUserLicenseRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "DELETE,GET,PUT")
									}

									return
								}

								elem = origElem
							case 'p': // Prefix: "preferences"
								origElem := elem
								if l := len("preferences"); len(elem) >= l && elem[0:l] == "preferences" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleGetMyPreferencesRequest([0]string{}, elemIsEscaped, w, r)
									case "PUT":
										s.handleUpdateMyPreferencesRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET,PUT")
									}

									return
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					case 'p': // Prefix: "profile-image"
						origElem := elem
						if l := len("profile-image"); len(elem) >= l && elem[0:l] == "profile-image" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "DELETE":
								s.handleDeleteProfileImageRequest([0]string{}, elemIsEscaped, w, r)
							case "POST":
								s.handleCreateProfileImageRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "DELETE,POST")
							}

							return
						}

						elem = origElem
					}
					// Param: "id"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleGetUserRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/profile-image"
						origElem := elem
						if l := len("/profile-image"); len(elem) >= l && elem[0:l] == "/profile-image" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleGetProfileImageRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 'v': // Prefix: "view/folder"
				origElem := elem
				if l := len("view/folder"); len(elem) >= l && elem[0:l] == "view/folder" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleGetAssetsByOriginalPathRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/unique-paths"
					origElem := elem
					if l := len("/unique-paths"); len(elem) >= l && elem[0:l] == "/unique-paths" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "GET":
							s.handleGetUniqueOriginalPathsRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}

					elem = origElem
				}

				elem = origElem
			}

			elem = origElem
		}
	}
	s.notFound(w, r)
}

// Route is route object.
type Route struct {
	name        string
	summary     string
	operationID string
	pathPattern string
	count       int
	args        [2]string
}

// Name returns ogen operation name.
//
// It is guaranteed to be unique and not empty.
func (r Route) Name() string {
	return r.name
}

// Summary returns OpenAPI summary.
func (r Route) Summary() string {
	return r.summary
}

// OperationID returns OpenAPI operationId.
func (r Route) OperationID() string {
	return r.operationID
}

// PathPattern returns OpenAPI path.
func (r Route) PathPattern() string {
	return r.pathPattern
}

// Args returns parsed arguments.
func (r Route) Args() []string {
	return r.args[:r.count]
}

// FindRoute finds Route for given method and path.
//
// Note: this method does not unescape path or handle reserved characters in path properly. Use FindPath instead.
func (s *Server) FindRoute(method, path string) (Route, bool) {
	return s.FindPath(method, &url.URL{Path: path})
}

// FindPath finds Route for given method and URL.
func (s *Server) FindPath(method string, u *url.URL) (r Route, _ bool) {
	var (
		elem = u.Path
		args = r.args
	)
	if rawPath := u.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
		}
		defer func() {
			for i, arg := range r.args[:r.count] {
				if unescaped, err := url.PathUnescape(arg); err == nil {
					r.args[i] = unescaped
				}
			}
		}()
	}

	elem, ok := s.cutPrefix(elem)
	if !ok {
		return r, false
	}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			origElem := elem
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'a': // Prefix: "a"
				origElem := elem
				if l := len("a"); len(elem) >= l && elem[0:l] == "a" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'c': // Prefix: "ctivities"
					origElem := elem
					if l := len("ctivities"); len(elem) >= l && elem[0:l] == "ctivities" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = "GetActivities"
							r.summary = ""
							r.operationID = "getActivities"
							r.pathPattern = "/activities"
							r.args = args
							r.count = 0
							return r, true
						case "POST":
							r.name = "CreateActivity"
							r.summary = ""
							r.operationID = "createActivity"
							r.pathPattern = "/activities"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 's': // Prefix: "statistics"
							origElem := elem
							if l := len("statistics"); len(elem) >= l && elem[0:l] == "statistics" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = "GetActivityStatistics"
									r.summary = ""
									r.operationID = "getActivityStatistics"
									r.pathPattern = "/activities/statistics"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

							elem = origElem
						}
						// Param: "id"
						// Leaf parameter
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "DELETE":
								r.name = "DeleteActivity"
								r.summary = ""
								r.operationID = "deleteActivity"
								r.pathPattern = "/activities/{id}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}

						elem = origElem
					}

					elem = origElem
				case 'd': // Prefix: "dmin/users"
					origElem := elem
					if l := len("dmin/users"); len(elem) >= l && elem[0:l] == "dmin/users" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = "SearchUsersAdmin"
							r.summary = ""
							r.operationID = "searchUsersAdmin"
							r.pathPattern = "/admin/users"
							r.args = args
							r.count = 0
							return r, true
						case "POST":
							r.name = "CreateUserAdmin"
							r.summary = ""
							r.operationID = "createUserAdmin"
							r.pathPattern = "/admin/users"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "id"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch method {
							case "DELETE":
								r.name = "DeleteUserAdmin"
								r.summary = ""
								r.operationID = "deleteUserAdmin"
								r.pathPattern = "/admin/users/{id}"
								r.args = args
								r.count = 1
								return r, true
							case "GET":
								r.name = "GetUserAdmin"
								r.summary = ""
								r.operationID = "getUserAdmin"
								r.pathPattern = "/admin/users/{id}"
								r.args = args
								r.count = 1
								return r, true
							case "PUT":
								r.name = "UpdateUserAdmin"
								r.summary = ""
								r.operationID = "updateUserAdmin"
								r.pathPattern = "/admin/users/{id}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							origElem := elem
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'p': // Prefix: "preferences"
								origElem := elem
								if l := len("preferences"); len(elem) >= l && elem[0:l] == "preferences" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "GET":
										r.name = "GetUserPreferencesAdmin"
										r.summary = ""
										r.operationID = "getUserPreferencesAdmin"
										r.pathPattern = "/admin/users/{id}/preferences"
										r.args = args
										r.count = 1
										return r, true
									case "PUT":
										r.name = "UpdateUserPreferencesAdmin"
										r.summary = ""
										r.operationID = "updateUserPreferencesAdmin"
										r.pathPattern = "/admin/users/{id}/preferences"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}

								elem = origElem
							case 'r': // Prefix: "restore"
								origElem := elem
								if l := len("restore"); len(elem) >= l && elem[0:l] == "restore" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "POST":
										r.name = "RestoreUserAdmin"
										r.summary = ""
										r.operationID = "restoreUserAdmin"
										r.pathPattern = "/admin/users/{id}/restore"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				case 'l': // Prefix: "lbums"
					origElem := elem
					if l := len("lbums"); len(elem) >= l && elem[0:l] == "lbums" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = "GetAllAlbums"
							r.summary = ""
							r.operationID = "getAllAlbums"
							r.pathPattern = "/albums"
							r.args = args
							r.count = 0
							return r, true
						case "POST":
							r.name = "CreateAlbum"
							r.summary = ""
							r.operationID = "createAlbum"
							r.pathPattern = "/albums"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 's': // Prefix: "statistics"
							origElem := elem
							if l := len("statistics"); len(elem) >= l && elem[0:l] == "statistics" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = "GetAlbumStatistics"
									r.summary = ""
									r.operationID = "getAlbumStatistics"
									r.pathPattern = "/albums/statistics"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

							elem = origElem
						}
						// Param: "id"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch method {
							case "DELETE":
								r.name = "DeleteAlbum"
								r.summary = ""
								r.operationID = "deleteAlbum"
								r.pathPattern = "/albums/{id}"
								r.args = args
								r.count = 1
								return r, true
							case "GET":
								r.name = "GetAlbumInfo"
								r.summary = ""
								r.operationID = "getAlbumInfo"
								r.pathPattern = "/albums/{id}"
								r.args = args
								r.count = 1
								return r, true
							case "PATCH":
								r.name = "UpdateAlbumInfo"
								r.summary = ""
								r.operationID = "updateAlbumInfo"
								r.pathPattern = "/albums/{id}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							origElem := elem
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'a': // Prefix: "assets"
								origElem := elem
								if l := len("assets"); len(elem) >= l && elem[0:l] == "assets" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "DELETE":
										r.name = "RemoveAssetFromAlbum"
										r.summary = ""
										r.operationID = "removeAssetFromAlbum"
										r.pathPattern = "/albums/{id}/assets"
										r.args = args
										r.count = 1
										return r, true
									case "PUT":
										r.name = "AddAssetsToAlbum"
										r.summary = ""
										r.operationID = "addAssetsToAlbum"
										r.pathPattern = "/albums/{id}/assets"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}

								elem = origElem
							case 'u': // Prefix: "user"
								origElem := elem
								if l := len("user"); len(elem) >= l && elem[0:l] == "user" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case '/': // Prefix: "/"
									origElem := elem
									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "userId"
									// Leaf parameter
									args[1] = elem
									elem = ""

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "DELETE":
											r.name = "RemoveUserFromAlbum"
											r.summary = ""
											r.operationID = "removeUserFromAlbum"
											r.pathPattern = "/albums/{id}/user/{userId}"
											r.args = args
											r.count = 2
											return r, true
										case "PUT":
											r.name = "UpdateAlbumUser"
											r.summary = ""
											r.operationID = "updateAlbumUser"
											r.pathPattern = "/albums/{id}/user/{userId}"
											r.args = args
											r.count = 2
											return r, true
										default:
											return
										}
									}

									elem = origElem
								case 's': // Prefix: "s"
									origElem := elem
									if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "PUT":
											r.name = "AddUsersToAlbum"
											r.summary = ""
											r.operationID = "addUsersToAlbum"
											r.pathPattern = "/albums/{id}/users"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}

									elem = origElem
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				case 'p': // Prefix: "pi-keys"
					origElem := elem
					if l := len("pi-keys"); len(elem) >= l && elem[0:l] == "pi-keys" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = "GetApiKeys"
							r.summary = ""
							r.operationID = "getApiKeys"
							r.pathPattern = "/api-keys"
							r.args = args
							r.count = 0
							return r, true
						case "POST":
							r.name = "CreateApiKey"
							r.summary = ""
							r.operationID = "createApiKey"
							r.pathPattern = "/api-keys"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "id"
						// Leaf parameter
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "DELETE":
								r.name = "DeleteApiKey"
								r.summary = ""
								r.operationID = "deleteApiKey"
								r.pathPattern = "/api-keys/{id}"
								r.args = args
								r.count = 1
								return r, true
							case "GET":
								r.name = "GetApiKey"
								r.summary = ""
								r.operationID = "getApiKey"
								r.pathPattern = "/api-keys/{id}"
								r.args = args
								r.count = 1
								return r, true
							case "PUT":
								r.name = "UpdateApiKey"
								r.summary = ""
								r.operationID = "updateApiKey"
								r.pathPattern = "/api-keys/{id}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}

						elem = origElem
					}

					elem = origElem
				case 's': // Prefix: "ssets"
					origElem := elem
					if l := len("ssets"); len(elem) >= l && elem[0:l] == "ssets" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "DELETE":
							r.name = "DeleteAssets"
							r.summary = ""
							r.operationID = "deleteAssets"
							r.pathPattern = "/assets"
							r.args = args
							r.count = 0
							return r, true
						case "POST":
							r.name = "UploadAsset"
							r.summary = ""
							r.operationID = "uploadAsset"
							r.pathPattern = "/assets"
							r.args = args
							r.count = 0
							return r, true
						case "PUT":
							r.name = "UpdateAssets"
							r.summary = ""
							r.operationID = "updateAssets"
							r.pathPattern = "/assets"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'b': // Prefix: "bulk-upload-check"
							origElem := elem
							if l := len("bulk-upload-check"); len(elem) >= l && elem[0:l] == "bulk-upload-check" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "POST":
									r.name = "CheckBulkUpload"
									r.summary = ""
									r.operationID = "checkBulkUpload"
									r.pathPattern = "/assets/bulk-upload-check"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

							elem = origElem
						case 'd': // Prefix: "device/"
							origElem := elem
							if l := len("device/"); len(elem) >= l && elem[0:l] == "device/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "deviceId"
							// Leaf parameter
							args[0] = elem
							elem = ""

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = "GetAllUserAssetsByDeviceId"
									r.summary = ""
									r.operationID = "getAllUserAssetsByDeviceId"
									r.pathPattern = "/assets/device/{deviceId}"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}

							elem = origElem
						case 'e': // Prefix: "exist"
							origElem := elem
							if l := len("exist"); len(elem) >= l && elem[0:l] == "exist" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "POST":
									r.name = "CheckExistingAssets"
									r.summary = ""
									r.operationID = "checkExistingAssets"
									r.pathPattern = "/assets/exist"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

							elem = origElem
						case 'j': // Prefix: "jobs"
							origElem := elem
							if l := len("jobs"); len(elem) >= l && elem[0:l] == "jobs" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "POST":
									r.name = "RunAssetJobs"
									r.summary = ""
									r.operationID = "runAssetJobs"
									r.pathPattern = "/assets/jobs"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

							elem = origElem
						case 'm': // Prefix: "memory-lane"
							origElem := elem
							if l := len("memory-lane"); len(elem) >= l && elem[0:l] == "memory-lane" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = "GetMemoryLane"
									r.summary = ""
									r.operationID = "getMemoryLane"
									r.pathPattern = "/assets/memory-lane"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

							elem = origElem
						case 'r': // Prefix: "random"
							origElem := elem
							if l := len("random"); len(elem) >= l && elem[0:l] == "random" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = "GetRandom"
									r.summary = ""
									r.operationID = "getRandom"
									r.pathPattern = "/assets/random"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

							elem = origElem
						case 's': // Prefix: "statistics"
							origElem := elem
							if l := len("statistics"); len(elem) >= l && elem[0:l] == "statistics" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = "GetAssetStatistics"
									r.summary = ""
									r.operationID = "getAssetStatistics"
									r.pathPattern = "/assets/statistics"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

							elem = origElem
						}
						// Param: "id"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch method {
							case "GET":
								r.name = "GetAssetInfo"
								r.summary = ""
								r.operationID = "getAssetInfo"
								r.pathPattern = "/assets/{id}"
								r.args = args
								r.count = 1
								return r, true
							case "PUT":
								r.name = "UpdateAsset"
								r.summary = ""
								r.operationID = "updateAsset"
								r.pathPattern = "/assets/{id}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							origElem := elem
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'o': // Prefix: "original"
								origElem := elem
								if l := len("original"); len(elem) >= l && elem[0:l] == "original" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "GET":
										r.name = "DownloadAsset"
										r.summary = ""
										r.operationID = "downloadAsset"
										r.pathPattern = "/assets/{id}/original"
										r.args = args
										r.count = 1
										return r, true
									case "PUT":
										r.name = "ReplaceAsset"
										r.summary = ""
										r.operationID = "replaceAsset"
										r.pathPattern = "/assets/{id}/original"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}

								elem = origElem
							case 't': // Prefix: "thumbnail"
								origElem := elem
								if l := len("thumbnail"); len(elem) >= l && elem[0:l] == "thumbnail" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "GET":
										r.name = "ViewAsset"
										r.summary = ""
										r.operationID = "viewAsset"
										r.pathPattern = "/assets/{id}/thumbnail"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}

								elem = origElem
							case 'v': // Prefix: "video/playback"
								origElem := elem
								if l := len("video/playback"); len(elem) >= l && elem[0:l] == "video/playback" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "GET":
										r.name = "PlayAssetVideo"
										r.summary = ""
										r.operationID = "playAssetVideo"
										r.pathPattern = "/assets/{id}/video/playback"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				case 'u': // Prefix: "u"
					origElem := elem
					if l := len("u"); len(elem) >= l && elem[0:l] == "u" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'd': // Prefix: "dit/deletes"
						origElem := elem
						if l := len("dit/deletes"); len(elem) >= l && elem[0:l] == "dit/deletes" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "GET":
								r.name = "GetAuditDeletes"
								r.summary = ""
								r.operationID = "getAuditDeletes"
								r.pathPattern = "/audit/deletes"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

						elem = origElem
					case 't': // Prefix: "th/"
						origElem := elem
						if l := len("th/"); len(elem) >= l && elem[0:l] == "th/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'a': // Prefix: "admin-sign-up"
							origElem := elem
							if l := len("admin-sign-up"); len(elem) >= l && elem[0:l] == "admin-sign-up" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "POST":
									r.name = "SignUpAdmin"
									r.summary = ""
									r.operationID = "signUpAdmin"
									r.pathPattern = "/auth/admin-sign-up"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

							elem = origElem
						case 'c': // Prefix: "change-password"
							origElem := elem
							if l := len("change-password"); len(elem) >= l && elem[0:l] == "change-password" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "POST":
									r.name = "ChangePassword"
									r.summary = ""
									r.operationID = "changePassword"
									r.pathPattern = "/auth/change-password"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

							elem = origElem
						case 'l': // Prefix: "log"
							origElem := elem
							if l := len("log"); len(elem) >= l && elem[0:l] == "log" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'i': // Prefix: "in"
								origElem := elem
								if l := len("in"); len(elem) >= l && elem[0:l] == "in" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "POST":
										r.name = "Login"
										r.summary = ""
										r.operationID = "login"
										r.pathPattern = "/auth/login"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}

								elem = origElem
							case 'o': // Prefix: "out"
								origElem := elem
								if l := len("out"); len(elem) >= l && elem[0:l] == "out" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "POST":
										r.name = "Logout"
										r.summary = ""
										r.operationID = "logout"
										r.pathPattern = "/auth/logout"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}

								elem = origElem
							}

							elem = origElem
						case 'v': // Prefix: "validateToken"
							origElem := elem
							if l := len("validateToken"); len(elem) >= l && elem[0:l] == "validateToken" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "POST":
									r.name = "ValidateAccessToken"
									r.summary = ""
									r.operationID = "validateAccessToken"
									r.pathPattern = "/auth/validateToken"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 'd': // Prefix: "d"
				origElem := elem
				if l := len("d"); len(elem) >= l && elem[0:l] == "d" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'o': // Prefix: "ownload/"
					origElem := elem
					if l := len("ownload/"); len(elem) >= l && elem[0:l] == "ownload/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'a': // Prefix: "archive"
						origElem := elem
						if l := len("archive"); len(elem) >= l && elem[0:l] == "archive" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "POST":
								r.name = "DownloadArchive"
								r.summary = ""
								r.operationID = "downloadArchive"
								r.pathPattern = "/download/archive"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

						elem = origElem
					case 'i': // Prefix: "info"
						origElem := elem
						if l := len("info"); len(elem) >= l && elem[0:l] == "info" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "POST":
								r.name = "GetDownloadInfo"
								r.summary = ""
								r.operationID = "getDownloadInfo"
								r.pathPattern = "/download/info"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

						elem = origElem
					}

					elem = origElem
				case 'u': // Prefix: "uplicates"
					origElem := elem
					if l := len("uplicates"); len(elem) >= l && elem[0:l] == "uplicates" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "GET":
							r.name = "GetAssetDuplicates"
							r.summary = ""
							r.operationID = "getAssetDuplicates"
							r.pathPattern = "/duplicates"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

					elem = origElem
				}

				elem = origElem
			case 'f': // Prefix: "faces"
				origElem := elem
				if l := len("faces"); len(elem) >= l && elem[0:l] == "faces" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = "GetFaces"
						r.summary = ""
						r.operationID = "getFaces"
						r.pathPattern = "/faces"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					origElem := elem
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Leaf parameter
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "PUT":
							r.name = "ReassignFacesById"
							r.summary = ""
							r.operationID = "reassignFacesById"
							r.pathPattern = "/faces/{id}"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}

					elem = origElem
				}

				elem = origElem
			case 'j': // Prefix: "jobs"
				origElem := elem
				if l := len("jobs"); len(elem) >= l && elem[0:l] == "jobs" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = "GetAllJobsStatus"
						r.summary = ""
						r.operationID = "getAllJobsStatus"
						r.pathPattern = "/jobs"
						r.args = args
						r.count = 0
						return r, true
					case "POST":
						r.name = "CreateJob"
						r.summary = ""
						r.operationID = "createJob"
						r.pathPattern = "/jobs"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					origElem := elem
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Leaf parameter
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "PUT":
							r.name = "SendJobCommand"
							r.summary = ""
							r.operationID = "sendJobCommand"
							r.pathPattern = "/jobs/{id}"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}

					elem = origElem
				}

				elem = origElem
			case 'l': // Prefix: "libraries"
				origElem := elem
				if l := len("libraries"); len(elem) >= l && elem[0:l] == "libraries" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = "GetAllLibraries"
						r.summary = ""
						r.operationID = "getAllLibraries"
						r.pathPattern = "/libraries"
						r.args = args
						r.count = 0
						return r, true
					case "POST":
						r.name = "CreateLibrary"
						r.summary = ""
						r.operationID = "createLibrary"
						r.pathPattern = "/libraries"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					origElem := elem
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch method {
						case "DELETE":
							r.name = "DeleteLibrary"
							r.summary = ""
							r.operationID = "deleteLibrary"
							r.pathPattern = "/libraries/{id}"
							r.args = args
							r.count = 1
							return r, true
						case "GET":
							r.name = "GetLibrary"
							r.summary = ""
							r.operationID = "getLibrary"
							r.pathPattern = "/libraries/{id}"
							r.args = args
							r.count = 1
							return r, true
						case "PUT":
							r.name = "UpdateLibrary"
							r.summary = ""
							r.operationID = "updateLibrary"
							r.pathPattern = "/libraries/{id}"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 's': // Prefix: "s"
							origElem := elem
							if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'c': // Prefix: "can"
								origElem := elem
								if l := len("can"); len(elem) >= l && elem[0:l] == "can" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "POST":
										r.name = "ScanLibrary"
										r.summary = ""
										r.operationID = "scanLibrary"
										r.pathPattern = "/libraries/{id}/scan"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}

								elem = origElem
							case 't': // Prefix: "tatistics"
								origElem := elem
								if l := len("tatistics"); len(elem) >= l && elem[0:l] == "tatistics" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "GET":
										r.name = "GetLibraryStatistics"
										r.summary = ""
										r.operationID = "getLibraryStatistics"
										r.pathPattern = "/libraries/{id}/statistics"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}

								elem = origElem
							}

							elem = origElem
						case 'v': // Prefix: "validate"
							origElem := elem
							if l := len("validate"); len(elem) >= l && elem[0:l] == "validate" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "POST":
									r.name = "Validate"
									r.summary = ""
									r.operationID = "validate"
									r.pathPattern = "/libraries/{id}/validate"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 'm': // Prefix: "m"
				origElem := elem
				if l := len("m"); len(elem) >= l && elem[0:l] == "m" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'a': // Prefix: "ap/"
					origElem := elem
					if l := len("ap/"); len(elem) >= l && elem[0:l] == "ap/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'm': // Prefix: "markers"
						origElem := elem
						if l := len("markers"); len(elem) >= l && elem[0:l] == "markers" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "GET":
								r.name = "GetMapMarkers"
								r.summary = ""
								r.operationID = "getMapMarkers"
								r.pathPattern = "/map/markers"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

						elem = origElem
					case 'r': // Prefix: "reverse-geocode"
						origElem := elem
						if l := len("reverse-geocode"); len(elem) >= l && elem[0:l] == "reverse-geocode" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "GET":
								r.name = "ReverseGeocode"
								r.summary = ""
								r.operationID = "reverseGeocode"
								r.pathPattern = "/map/reverse-geocode"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

						elem = origElem
					}

					elem = origElem
				case 'e': // Prefix: "emories"
					origElem := elem
					if l := len("emories"); len(elem) >= l && elem[0:l] == "emories" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = "SearchMemories"
							r.summary = ""
							r.operationID = "searchMemories"
							r.pathPattern = "/memories"
							r.args = args
							r.count = 0
							return r, true
						case "POST":
							r.name = "CreateMemory"
							r.summary = ""
							r.operationID = "createMemory"
							r.pathPattern = "/memories"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "id"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch method {
							case "DELETE":
								r.name = "DeleteMemory"
								r.summary = ""
								r.operationID = "deleteMemory"
								r.pathPattern = "/memories/{id}"
								r.args = args
								r.count = 1
								return r, true
							case "GET":
								r.name = "GetMemory"
								r.summary = ""
								r.operationID = "getMemory"
								r.pathPattern = "/memories/{id}"
								r.args = args
								r.count = 1
								return r, true
							case "PUT":
								r.name = "UpdateMemory"
								r.summary = ""
								r.operationID = "updateMemory"
								r.pathPattern = "/memories/{id}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/assets"
							origElem := elem
							if l := len("/assets"); len(elem) >= l && elem[0:l] == "/assets" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "DELETE":
									r.name = "RemoveMemoryAssets"
									r.summary = ""
									r.operationID = "removeMemoryAssets"
									r.pathPattern = "/memories/{id}/assets"
									r.args = args
									r.count = 1
									return r, true
								case "PUT":
									r.name = "AddMemoryAssets"
									r.summary = ""
									r.operationID = "addMemoryAssets"
									r.pathPattern = "/memories/{id}/assets"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 'n': // Prefix: "notifications/test-email"
				origElem := elem
				if l := len("notifications/test-email"); len(elem) >= l && elem[0:l] == "notifications/test-email" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch method {
					case "POST":
						r.name = "SendTestEmail"
						r.summary = ""
						r.operationID = "sendTestEmail"
						r.pathPattern = "/notifications/test-email"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}

				elem = origElem
			case 'o': // Prefix: "oauth/"
				origElem := elem
				if l := len("oauth/"); len(elem) >= l && elem[0:l] == "oauth/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'a': // Prefix: "authorize"
					origElem := elem
					if l := len("authorize"); len(elem) >= l && elem[0:l] == "authorize" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "POST":
							r.name = "StartOAuth"
							r.summary = ""
							r.operationID = "startOAuth"
							r.pathPattern = "/oauth/authorize"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

					elem = origElem
				case 'c': // Prefix: "callback"
					origElem := elem
					if l := len("callback"); len(elem) >= l && elem[0:l] == "callback" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "POST":
							r.name = "FinishOAuth"
							r.summary = ""
							r.operationID = "finishOAuth"
							r.pathPattern = "/oauth/callback"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

					elem = origElem
				case 'l': // Prefix: "link"
					origElem := elem
					if l := len("link"); len(elem) >= l && elem[0:l] == "link" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "POST":
							r.name = "LinkOAuthAccount"
							r.summary = ""
							r.operationID = "linkOAuthAccount"
							r.pathPattern = "/oauth/link"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

					elem = origElem
				case 'm': // Prefix: "mobile-redirect"
					origElem := elem
					if l := len("mobile-redirect"); len(elem) >= l && elem[0:l] == "mobile-redirect" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "GET":
							r.name = "RedirectOAuthToMobile"
							r.summary = ""
							r.operationID = "redirectOAuthToMobile"
							r.pathPattern = "/oauth/mobile-redirect"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

					elem = origElem
				case 'u': // Prefix: "unlink"
					origElem := elem
					if l := len("unlink"); len(elem) >= l && elem[0:l] == "unlink" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "POST":
							r.name = "UnlinkOAuthAccount"
							r.summary = ""
							r.operationID = "unlinkOAuthAccount"
							r.pathPattern = "/oauth/unlink"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

					elem = origElem
				}

				elem = origElem
			case 'p': // Prefix: "p"
				origElem := elem
				if l := len("p"); len(elem) >= l && elem[0:l] == "p" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'a': // Prefix: "artners"
					origElem := elem
					if l := len("artners"); len(elem) >= l && elem[0:l] == "artners" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = "GetPartners"
							r.summary = ""
							r.operationID = "getPartners"
							r.pathPattern = "/partners"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "id"
						// Leaf parameter
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "DELETE":
								r.name = "RemovePartner"
								r.summary = ""
								r.operationID = "removePartner"
								r.pathPattern = "/partners/{id}"
								r.args = args
								r.count = 1
								return r, true
							case "POST":
								r.name = "CreatePartner"
								r.summary = ""
								r.operationID = "createPartner"
								r.pathPattern = "/partners/{id}"
								r.args = args
								r.count = 1
								return r, true
							case "PUT":
								r.name = "UpdatePartner"
								r.summary = ""
								r.operationID = "updatePartner"
								r.pathPattern = "/partners/{id}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}

						elem = origElem
					}

					elem = origElem
				case 'e': // Prefix: "eople"
					origElem := elem
					if l := len("eople"); len(elem) >= l && elem[0:l] == "eople" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = "GetAllPeople"
							r.summary = ""
							r.operationID = "getAllPeople"
							r.pathPattern = "/people"
							r.args = args
							r.count = 0
							return r, true
						case "POST":
							r.name = "CreatePerson"
							r.summary = ""
							r.operationID = "createPerson"
							r.pathPattern = "/people"
							r.args = args
							r.count = 0
							return r, true
						case "PUT":
							r.name = "UpdatePeople"
							r.summary = ""
							r.operationID = "updatePeople"
							r.pathPattern = "/people"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "id"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch method {
							case "GET":
								r.name = "GetPerson"
								r.summary = ""
								r.operationID = "getPerson"
								r.pathPattern = "/people/{id}"
								r.args = args
								r.count = 1
								return r, true
							case "PUT":
								r.name = "UpdatePerson"
								r.summary = ""
								r.operationID = "updatePerson"
								r.pathPattern = "/people/{id}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							origElem := elem
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'm': // Prefix: "merge"
								origElem := elem
								if l := len("merge"); len(elem) >= l && elem[0:l] == "merge" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "POST":
										r.name = "MergePerson"
										r.summary = ""
										r.operationID = "mergePerson"
										r.pathPattern = "/people/{id}/merge"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}

								elem = origElem
							case 'r': // Prefix: "reassign"
								origElem := elem
								if l := len("reassign"); len(elem) >= l && elem[0:l] == "reassign" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "PUT":
										r.name = "ReassignFaces"
										r.summary = ""
										r.operationID = "reassignFaces"
										r.pathPattern = "/people/{id}/reassign"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}

								elem = origElem
							case 's': // Prefix: "statistics"
								origElem := elem
								if l := len("statistics"); len(elem) >= l && elem[0:l] == "statistics" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "GET":
										r.name = "GetPersonStatistics"
										r.summary = ""
										r.operationID = "getPersonStatistics"
										r.pathPattern = "/people/{id}/statistics"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}

								elem = origElem
							case 't': // Prefix: "thumbnail"
								origElem := elem
								if l := len("thumbnail"); len(elem) >= l && elem[0:l] == "thumbnail" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "GET":
										r.name = "GetPersonThumbnail"
										r.summary = ""
										r.operationID = "getPersonThumbnail"
										r.pathPattern = "/people/{id}/thumbnail"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 'r': // Prefix: "reports"
				origElem := elem
				if l := len("reports"); len(elem) >= l && elem[0:l] == "reports" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = "GetAuditFiles"
						r.summary = ""
						r.operationID = "getAuditFiles"
						r.pathPattern = "/reports"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					origElem := elem
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'c': // Prefix: "checksum"
						origElem := elem
						if l := len("checksum"); len(elem) >= l && elem[0:l] == "checksum" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "POST":
								r.name = "GetFileChecksums"
								r.summary = ""
								r.operationID = "getFileChecksums"
								r.pathPattern = "/reports/checksum"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

						elem = origElem
					case 'f': // Prefix: "fix"
						origElem := elem
						if l := len("fix"); len(elem) >= l && elem[0:l] == "fix" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "POST":
								r.name = "FixAuditFiles"
								r.summary = ""
								r.operationID = "fixAuditFiles"
								r.pathPattern = "/reports/fix"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 's': // Prefix: "s"
				origElem := elem
				if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'e': // Prefix: "e"
					origElem := elem
					if l := len("e"); len(elem) >= l && elem[0:l] == "e" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'a': // Prefix: "arch/"
						origElem := elem
						if l := len("arch/"); len(elem) >= l && elem[0:l] == "arch/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'c': // Prefix: "cities"
							origElem := elem
							if l := len("cities"); len(elem) >= l && elem[0:l] == "cities" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = "GetAssetsByCity"
									r.summary = ""
									r.operationID = "getAssetsByCity"
									r.pathPattern = "/search/cities"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

							elem = origElem
						case 'e': // Prefix: "explore"
							origElem := elem
							if l := len("explore"); len(elem) >= l && elem[0:l] == "explore" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = "GetExploreData"
									r.summary = ""
									r.operationID = "getExploreData"
									r.pathPattern = "/search/explore"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

							elem = origElem
						case 'm': // Prefix: "metadata"
							origElem := elem
							if l := len("metadata"); len(elem) >= l && elem[0:l] == "metadata" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "POST":
									r.name = "SearchMetadata"
									r.summary = ""
									r.operationID = "searchMetadata"
									r.pathPattern = "/search/metadata"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

							elem = origElem
						case 'p': // Prefix: "p"
							origElem := elem
							if l := len("p"); len(elem) >= l && elem[0:l] == "p" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'e': // Prefix: "erson"
								origElem := elem
								if l := len("erson"); len(elem) >= l && elem[0:l] == "erson" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "GET":
										r.name = "SearchPerson"
										r.summary = ""
										r.operationID = "searchPerson"
										r.pathPattern = "/search/person"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}

								elem = origElem
							case 'l': // Prefix: "laces"
								origElem := elem
								if l := len("laces"); len(elem) >= l && elem[0:l] == "laces" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "GET":
										r.name = "SearchPlaces"
										r.summary = ""
										r.operationID = "searchPlaces"
										r.pathPattern = "/search/places"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}

								elem = origElem
							}

							elem = origElem
						case 'r': // Prefix: "random"
							origElem := elem
							if l := len("random"); len(elem) >= l && elem[0:l] == "random" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "POST":
									r.name = "SearchRandom"
									r.summary = ""
									r.operationID = "searchRandom"
									r.pathPattern = "/search/random"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

							elem = origElem
						case 's': // Prefix: "s"
							origElem := elem
							if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'm': // Prefix: "mart"
								origElem := elem
								if l := len("mart"); len(elem) >= l && elem[0:l] == "mart" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "POST":
										r.name = "SearchSmart"
										r.summary = ""
										r.operationID = "searchSmart"
										r.pathPattern = "/search/smart"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}

								elem = origElem
							case 'u': // Prefix: "uggestions"
								origElem := elem
								if l := len("uggestions"); len(elem) >= l && elem[0:l] == "uggestions" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "GET":
										r.name = "GetSearchSuggestions"
										r.summary = ""
										r.operationID = "getSearchSuggestions"
										r.pathPattern = "/search/suggestions"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					case 'r': // Prefix: "rver/"
						origElem := elem
						if l := len("rver/"); len(elem) >= l && elem[0:l] == "rver/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'a': // Prefix: "about"
							origElem := elem
							if l := len("about"); len(elem) >= l && elem[0:l] == "about" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = "GetAboutInfo"
									r.summary = ""
									r.operationID = "getAboutInfo"
									r.pathPattern = "/server/about"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

							elem = origElem
						case 'c': // Prefix: "config"
							origElem := elem
							if l := len("config"); len(elem) >= l && elem[0:l] == "config" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = "GetServerConfig"
									r.summary = ""
									r.operationID = "getServerConfig"
									r.pathPattern = "/server/config"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

							elem = origElem
						case 'f': // Prefix: "features"
							origElem := elem
							if l := len("features"); len(elem) >= l && elem[0:l] == "features" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = "GetServerFeatures"
									r.summary = ""
									r.operationID = "getServerFeatures"
									r.pathPattern = "/server/features"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

							elem = origElem
						case 'l': // Prefix: "license"
							origElem := elem
							if l := len("license"); len(elem) >= l && elem[0:l] == "license" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "DELETE":
									r.name = "DeleteServerLicense"
									r.summary = ""
									r.operationID = "deleteServerLicense"
									r.pathPattern = "/server/license"
									r.args = args
									r.count = 0
									return r, true
								case "GET":
									r.name = "GetServerLicense"
									r.summary = ""
									r.operationID = "getServerLicense"
									r.pathPattern = "/server/license"
									r.args = args
									r.count = 0
									return r, true
								case "PUT":
									r.name = "SetServerLicense"
									r.summary = ""
									r.operationID = "setServerLicense"
									r.pathPattern = "/server/license"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

							elem = origElem
						case 'm': // Prefix: "media-types"
							origElem := elem
							if l := len("media-types"); len(elem) >= l && elem[0:l] == "media-types" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = "GetSupportedMediaTypes"
									r.summary = ""
									r.operationID = "getSupportedMediaTypes"
									r.pathPattern = "/server/media-types"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

							elem = origElem
						case 'p': // Prefix: "ping"
							origElem := elem
							if l := len("ping"); len(elem) >= l && elem[0:l] == "ping" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = "PingServer"
									r.summary = ""
									r.operationID = "pingServer"
									r.pathPattern = "/server/ping"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

							elem = origElem
						case 's': // Prefix: "st"
							origElem := elem
							if l := len("st"); len(elem) >= l && elem[0:l] == "st" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'a': // Prefix: "atistics"
								origElem := elem
								if l := len("atistics"); len(elem) >= l && elem[0:l] == "atistics" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "GET":
										r.name = "GetServerStatistics"
										r.summary = ""
										r.operationID = "getServerStatistics"
										r.pathPattern = "/server/statistics"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}

								elem = origElem
							case 'o': // Prefix: "orage"
								origElem := elem
								if l := len("orage"); len(elem) >= l && elem[0:l] == "orage" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "GET":
										r.name = "GetStorage"
										r.summary = ""
										r.operationID = "getStorage"
										r.pathPattern = "/server/storage"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}

								elem = origElem
							}

							elem = origElem
						case 't': // Prefix: "theme"
							origElem := elem
							if l := len("theme"); len(elem) >= l && elem[0:l] == "theme" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = "GetTheme"
									r.summary = ""
									r.operationID = "getTheme"
									r.pathPattern = "/server/theme"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

							elem = origElem
						case 'v': // Prefix: "version"
							origElem := elem
							if l := len("version"); len(elem) >= l && elem[0:l] == "version" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "GET":
									r.name = "GetServerVersion"
									r.summary = ""
									r.operationID = "getServerVersion"
									r.pathPattern = "/server/version"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}
							switch elem[0] {
							case '-': // Prefix: "-history"
								origElem := elem
								if l := len("-history"); len(elem) >= l && elem[0:l] == "-history" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "GET":
										r.name = "GetVersionHistory"
										r.summary = ""
										r.operationID = "getVersionHistory"
										r.pathPattern = "/server/version-history"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					case 's': // Prefix: "ssions"
						origElem := elem
						if l := len("ssions"); len(elem) >= l && elem[0:l] == "ssions" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "DELETE":
								r.name = "DeleteAllSessions"
								r.summary = ""
								r.operationID = "deleteAllSessions"
								r.pathPattern = "/sessions"
								r.args = args
								r.count = 0
								return r, true
							case "GET":
								r.name = "GetSessions"
								r.summary = ""
								r.operationID = "getSessions"
								r.pathPattern = "/sessions"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							origElem := elem
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "id"
							// Leaf parameter
							args[0] = elem
							elem = ""

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "DELETE":
									r.name = "DeleteSession"
									r.summary = ""
									r.operationID = "deleteSession"
									r.pathPattern = "/sessions/{id}"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				case 'h': // Prefix: "hared-links"
					origElem := elem
					if l := len("hared-links"); len(elem) >= l && elem[0:l] == "hared-links" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = "GetAllSharedLinks"
							r.summary = ""
							r.operationID = "getAllSharedLinks"
							r.pathPattern = "/shared-links"
							r.args = args
							r.count = 0
							return r, true
						case "POST":
							r.name = "CreateSharedLink"
							r.summary = ""
							r.operationID = "createSharedLink"
							r.pathPattern = "/shared-links"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'm': // Prefix: "me"
							origElem := elem
							if l := len("me"); len(elem) >= l && elem[0:l] == "me" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = "GetMySharedLink"
									r.summary = ""
									r.operationID = "getMySharedLink"
									r.pathPattern = "/shared-links/me"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

							elem = origElem
						}
						// Param: "id"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch method {
							case "DELETE":
								r.name = "RemoveSharedLink"
								r.summary = ""
								r.operationID = "removeSharedLink"
								r.pathPattern = "/shared-links/{id}"
								r.args = args
								r.count = 1
								return r, true
							case "GET":
								r.name = "GetSharedLinkById"
								r.summary = ""
								r.operationID = "getSharedLinkById"
								r.pathPattern = "/shared-links/{id}"
								r.args = args
								r.count = 1
								return r, true
							case "PATCH":
								r.name = "UpdateSharedLink"
								r.summary = ""
								r.operationID = "updateSharedLink"
								r.pathPattern = "/shared-links/{id}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/assets"
							origElem := elem
							if l := len("/assets"); len(elem) >= l && elem[0:l] == "/assets" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "DELETE":
									r.name = "RemoveSharedLinkAssets"
									r.summary = ""
									r.operationID = "removeSharedLinkAssets"
									r.pathPattern = "/shared-links/{id}/assets"
									r.args = args
									r.count = 1
									return r, true
								case "PUT":
									r.name = "AddSharedLinkAssets"
									r.summary = ""
									r.operationID = "addSharedLinkAssets"
									r.pathPattern = "/shared-links/{id}/assets"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				case 't': // Prefix: "tacks"
					origElem := elem
					if l := len("tacks"); len(elem) >= l && elem[0:l] == "tacks" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "DELETE":
							r.name = "DeleteStacks"
							r.summary = ""
							r.operationID = "deleteStacks"
							r.pathPattern = "/stacks"
							r.args = args
							r.count = 0
							return r, true
						case "GET":
							r.name = "SearchStacks"
							r.summary = ""
							r.operationID = "searchStacks"
							r.pathPattern = "/stacks"
							r.args = args
							r.count = 0
							return r, true
						case "POST":
							r.name = "CreateStack"
							r.summary = ""
							r.operationID = "createStack"
							r.pathPattern = "/stacks"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "id"
						// Leaf parameter
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "DELETE":
								r.name = "DeleteStack"
								r.summary = ""
								r.operationID = "deleteStack"
								r.pathPattern = "/stacks/{id}"
								r.args = args
								r.count = 1
								return r, true
							case "GET":
								r.name = "GetStack"
								r.summary = ""
								r.operationID = "getStack"
								r.pathPattern = "/stacks/{id}"
								r.args = args
								r.count = 1
								return r, true
							case "PUT":
								r.name = "UpdateStack"
								r.summary = ""
								r.operationID = "updateStack"
								r.pathPattern = "/stacks/{id}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}

						elem = origElem
					}

					elem = origElem
				case 'y': // Prefix: "y"
					origElem := elem
					if l := len("y"); len(elem) >= l && elem[0:l] == "y" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'n': // Prefix: "nc/"
						origElem := elem
						if l := len("nc/"); len(elem) >= l && elem[0:l] == "nc/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'd': // Prefix: "delta-sync"
							origElem := elem
							if l := len("delta-sync"); len(elem) >= l && elem[0:l] == "delta-sync" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "POST":
									r.name = "GetDeltaSync"
									r.summary = ""
									r.operationID = "getDeltaSync"
									r.pathPattern = "/sync/delta-sync"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

							elem = origElem
						case 'f': // Prefix: "full-sync"
							origElem := elem
							if l := len("full-sync"); len(elem) >= l && elem[0:l] == "full-sync" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "POST":
									r.name = "GetFullSyncForUser"
									r.summary = ""
									r.operationID = "getFullSyncForUser"
									r.pathPattern = "/sync/full-sync"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

							elem = origElem
						}

						elem = origElem
					case 's': // Prefix: "stem-"
						origElem := elem
						if l := len("stem-"); len(elem) >= l && elem[0:l] == "stem-" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'c': // Prefix: "config"
							origElem := elem
							if l := len("config"); len(elem) >= l && elem[0:l] == "config" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "GET":
									r.name = "GetConfig"
									r.summary = ""
									r.operationID = "getConfig"
									r.pathPattern = "/system-config"
									r.args = args
									r.count = 0
									return r, true
								case "PUT":
									r.name = "UpdateConfig"
									r.summary = ""
									r.operationID = "updateConfig"
									r.pathPattern = "/system-config"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								origElem := elem
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'd': // Prefix: "defaults"
									origElem := elem
									if l := len("defaults"); len(elem) >= l && elem[0:l] == "defaults" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "GET":
											r.name = "GetConfigDefaults"
											r.summary = ""
											r.operationID = "getConfigDefaults"
											r.pathPattern = "/system-config/defaults"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}

									elem = origElem
								case 's': // Prefix: "storage-template-options"
									origElem := elem
									if l := len("storage-template-options"); len(elem) >= l && elem[0:l] == "storage-template-options" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "GET":
											r.name = "GetStorageTemplateOptions"
											r.summary = ""
											r.operationID = "getStorageTemplateOptions"
											r.pathPattern = "/system-config/storage-template-options"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}

									elem = origElem
								}

								elem = origElem
							}

							elem = origElem
						case 'm': // Prefix: "metadata/"
							origElem := elem
							if l := len("metadata/"); len(elem) >= l && elem[0:l] == "metadata/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'a': // Prefix: "admin-onboarding"
								origElem := elem
								if l := len("admin-onboarding"); len(elem) >= l && elem[0:l] == "admin-onboarding" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "GET":
										r.name = "GetAdminOnboarding"
										r.summary = ""
										r.operationID = "getAdminOnboarding"
										r.pathPattern = "/system-metadata/admin-onboarding"
										r.args = args
										r.count = 0
										return r, true
									case "POST":
										r.name = "UpdateAdminOnboarding"
										r.summary = ""
										r.operationID = "updateAdminOnboarding"
										r.pathPattern = "/system-metadata/admin-onboarding"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}

								elem = origElem
							case 'r': // Prefix: "reverse-geocoding-state"
								origElem := elem
								if l := len("reverse-geocoding-state"); len(elem) >= l && elem[0:l] == "reverse-geocoding-state" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "GET":
										r.name = "GetReverseGeocodingState"
										r.summary = ""
										r.operationID = "getReverseGeocodingState"
										r.pathPattern = "/system-metadata/reverse-geocoding-state"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 't': // Prefix: "t"
				origElem := elem
				if l := len("t"); len(elem) >= l && elem[0:l] == "t" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'a': // Prefix: "ags"
					origElem := elem
					if l := len("ags"); len(elem) >= l && elem[0:l] == "ags" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = "GetAllTags"
							r.summary = ""
							r.operationID = "getAllTags"
							r.pathPattern = "/tags"
							r.args = args
							r.count = 0
							return r, true
						case "POST":
							r.name = "CreateTag"
							r.summary = ""
							r.operationID = "createTag"
							r.pathPattern = "/tags"
							r.args = args
							r.count = 0
							return r, true
						case "PUT":
							r.name = "UpsertTags"
							r.summary = ""
							r.operationID = "upsertTags"
							r.pathPattern = "/tags"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'a': // Prefix: "assets"
							origElem := elem
							if l := len("assets"); len(elem) >= l && elem[0:l] == "assets" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "PUT":
									r.name = "BulkTagAssets"
									r.summary = ""
									r.operationID = "bulkTagAssets"
									r.pathPattern = "/tags/assets"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

							elem = origElem
						}
						// Param: "id"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch method {
							case "DELETE":
								r.name = "DeleteTag"
								r.summary = ""
								r.operationID = "deleteTag"
								r.pathPattern = "/tags/{id}"
								r.args = args
								r.count = 1
								return r, true
							case "GET":
								r.name = "GetTagById"
								r.summary = ""
								r.operationID = "getTagById"
								r.pathPattern = "/tags/{id}"
								r.args = args
								r.count = 1
								return r, true
							case "PUT":
								r.name = "UpdateTag"
								r.summary = ""
								r.operationID = "updateTag"
								r.pathPattern = "/tags/{id}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/assets"
							origElem := elem
							if l := len("/assets"); len(elem) >= l && elem[0:l] == "/assets" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "DELETE":
									r.name = "UntagAssets"
									r.summary = ""
									r.operationID = "untagAssets"
									r.pathPattern = "/tags/{id}/assets"
									r.args = args
									r.count = 1
									return r, true
								case "PUT":
									r.name = "TagAssets"
									r.summary = ""
									r.operationID = "tagAssets"
									r.pathPattern = "/tags/{id}/assets"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				case 'i': // Prefix: "imeline/bucket"
					origElem := elem
					if l := len("imeline/bucket"); len(elem) >= l && elem[0:l] == "imeline/bucket" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = "GetTimeBucket"
							r.summary = ""
							r.operationID = "getTimeBucket"
							r.pathPattern = "/timeline/bucket"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case 's': // Prefix: "s"
						origElem := elem
						if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "GET":
								r.name = "GetTimeBuckets"
								r.summary = ""
								r.operationID = "getTimeBuckets"
								r.pathPattern = "/timeline/buckets"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

						elem = origElem
					}

					elem = origElem
				case 'r': // Prefix: "rash/"
					origElem := elem
					if l := len("rash/"); len(elem) >= l && elem[0:l] == "rash/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'e': // Prefix: "empty"
						origElem := elem
						if l := len("empty"); len(elem) >= l && elem[0:l] == "empty" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "POST":
								r.name = "EmptyTrash"
								r.summary = ""
								r.operationID = "emptyTrash"
								r.pathPattern = "/trash/empty"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

						elem = origElem
					case 'r': // Prefix: "restore"
						origElem := elem
						if l := len("restore"); len(elem) >= l && elem[0:l] == "restore" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "POST":
								r.name = "RestoreTrash"
								r.summary = ""
								r.operationID = "restoreTrash"
								r.pathPattern = "/trash/restore"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/assets"
							origElem := elem
							if l := len("/assets"); len(elem) >= l && elem[0:l] == "/assets" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "POST":
									r.name = "RestoreAssets"
									r.summary = ""
									r.operationID = "restoreAssets"
									r.pathPattern = "/trash/restore/assets"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 'u': // Prefix: "users"
				origElem := elem
				if l := len("users"); len(elem) >= l && elem[0:l] == "users" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = "SearchUsers"
						r.summary = ""
						r.operationID = "searchUsers"
						r.pathPattern = "/users"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					origElem := elem
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'm': // Prefix: "me"
						origElem := elem
						if l := len("me"); len(elem) >= l && elem[0:l] == "me" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "GET":
								r.name = "GetMyUser"
								r.summary = ""
								r.operationID = "getMyUser"
								r.pathPattern = "/users/me"
								r.args = args
								r.count = 0
								return r, true
							case "PUT":
								r.name = "UpdateMyUser"
								r.summary = ""
								r.operationID = "updateMyUser"
								r.pathPattern = "/users/me"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							origElem := elem
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'l': // Prefix: "license"
								origElem := elem
								if l := len("license"); len(elem) >= l && elem[0:l] == "license" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "DELETE":
										r.name = "DeleteUserLicense"
										r.summary = ""
										r.operationID = "deleteUserLicense"
										r.pathPattern = "/users/me/license"
										r.args = args
										r.count = 0
										return r, true
									case "GET":
										r.name = "GetUserLicense"
										r.summary = ""
										r.operationID = "getUserLicense"
										r.pathPattern = "/users/me/license"
										r.args = args
										r.count = 0
										return r, true
									case "PUT":
										r.name = "SetUserLicense"
										r.summary = ""
										r.operationID = "setUserLicense"
										r.pathPattern = "/users/me/license"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}

								elem = origElem
							case 'p': // Prefix: "preferences"
								origElem := elem
								if l := len("preferences"); len(elem) >= l && elem[0:l] == "preferences" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "GET":
										r.name = "GetMyPreferences"
										r.summary = ""
										r.operationID = "getMyPreferences"
										r.pathPattern = "/users/me/preferences"
										r.args = args
										r.count = 0
										return r, true
									case "PUT":
										r.name = "UpdateMyPreferences"
										r.summary = ""
										r.operationID = "updateMyPreferences"
										r.pathPattern = "/users/me/preferences"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					case 'p': // Prefix: "profile-image"
						origElem := elem
						if l := len("profile-image"); len(elem) >= l && elem[0:l] == "profile-image" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "DELETE":
								r.name = "DeleteProfileImage"
								r.summary = ""
								r.operationID = "deleteProfileImage"
								r.pathPattern = "/users/profile-image"
								r.args = args
								r.count = 0
								return r, true
							case "POST":
								r.name = "CreateProfileImage"
								r.summary = ""
								r.operationID = "createProfileImage"
								r.pathPattern = "/users/profile-image"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

						elem = origElem
					}
					// Param: "id"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = "GetUser"
							r.summary = ""
							r.operationID = "getUser"
							r.pathPattern = "/users/{id}"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/profile-image"
						origElem := elem
						if l := len("/profile-image"); len(elem) >= l && elem[0:l] == "/profile-image" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "GET":
								r.name = "GetProfileImage"
								r.summary = ""
								r.operationID = "getProfileImage"
								r.pathPattern = "/users/{id}/profile-image"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 'v': // Prefix: "view/folder"
				origElem := elem
				if l := len("view/folder"); len(elem) >= l && elem[0:l] == "view/folder" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = "GetAssetsByOriginalPath"
						r.summary = ""
						r.operationID = "getAssetsByOriginalPath"
						r.pathPattern = "/view/folder"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/unique-paths"
					origElem := elem
					if l := len("/unique-paths"); len(elem) >= l && elem[0:l] == "/unique-paths" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "GET":
							r.name = "GetUniqueOriginalPaths"
							r.summary = ""
							r.operationID = "getUniqueOriginalPaths"
							r.pathPattern = "/view/folder/unique-paths"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

					elem = origElem
				}

				elem = origElem
			}

			elem = origElem
		}
	}
	return r, false
}
