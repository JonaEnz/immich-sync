// Code generated by ogen, DO NOT EDIT.

package oapi

import (
	"net/http"
	"net/url"
	"time"

	"github.com/go-faster/errors"
	"github.com/google/uuid"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// AddAssetsToAlbumParams is parameters of addAssetsToAlbum operation.
type AddAssetsToAlbumParams struct {
	ID  uuid.UUID
	Key OptString
}

func unpackAddAssetsToAlbumParams(packed middleware.Parameters) (params AddAssetsToAlbumParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	{
		key := middleware.ParameterKey{
			Name: "key",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Key = v.(OptString)
		}
	}
	return params
}

func decodeAddAssetsToAlbumParams(args [1]string, argsEscaped bool, r *http.Request) (params AddAssetsToAlbumParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: key.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "key",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotKeyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotKeyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Key.SetTo(paramsDotKeyVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "key",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// AddMemoryAssetsParams is parameters of addMemoryAssets operation.
type AddMemoryAssetsParams struct {
	ID uuid.UUID
}

func unpackAddMemoryAssetsParams(packed middleware.Parameters) (params AddMemoryAssetsParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeAddMemoryAssetsParams(args [1]string, argsEscaped bool, r *http.Request) (params AddMemoryAssetsParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// AddSharedLinkAssetsParams is parameters of addSharedLinkAssets operation.
type AddSharedLinkAssetsParams struct {
	ID  uuid.UUID
	Key OptString
}

func unpackAddSharedLinkAssetsParams(packed middleware.Parameters) (params AddSharedLinkAssetsParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	{
		key := middleware.ParameterKey{
			Name: "key",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Key = v.(OptString)
		}
	}
	return params
}

func decodeAddSharedLinkAssetsParams(args [1]string, argsEscaped bool, r *http.Request) (params AddSharedLinkAssetsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: key.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "key",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotKeyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotKeyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Key.SetTo(paramsDotKeyVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "key",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// AddUsersToAlbumParams is parameters of addUsersToAlbum operation.
type AddUsersToAlbumParams struct {
	ID uuid.UUID
}

func unpackAddUsersToAlbumParams(packed middleware.Parameters) (params AddUsersToAlbumParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeAddUsersToAlbumParams(args [1]string, argsEscaped bool, r *http.Request) (params AddUsersToAlbumParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// CreatePartnerParams is parameters of createPartner operation.
type CreatePartnerParams struct {
	ID uuid.UUID
}

func unpackCreatePartnerParams(packed middleware.Parameters) (params CreatePartnerParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeCreatePartnerParams(args [1]string, argsEscaped bool, r *http.Request) (params CreatePartnerParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DeleteActivityParams is parameters of deleteActivity operation.
type DeleteActivityParams struct {
	ID uuid.UUID
}

func unpackDeleteActivityParams(packed middleware.Parameters) (params DeleteActivityParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeDeleteActivityParams(args [1]string, argsEscaped bool, r *http.Request) (params DeleteActivityParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DeleteAlbumParams is parameters of deleteAlbum operation.
type DeleteAlbumParams struct {
	ID uuid.UUID
}

func unpackDeleteAlbumParams(packed middleware.Parameters) (params DeleteAlbumParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeDeleteAlbumParams(args [1]string, argsEscaped bool, r *http.Request) (params DeleteAlbumParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DeleteApiKeyParams is parameters of deleteApiKey operation.
type DeleteApiKeyParams struct {
	ID uuid.UUID
}

func unpackDeleteApiKeyParams(packed middleware.Parameters) (params DeleteApiKeyParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeDeleteApiKeyParams(args [1]string, argsEscaped bool, r *http.Request) (params DeleteApiKeyParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DeleteFaceParams is parameters of deleteFace operation.
type DeleteFaceParams struct {
	ID uuid.UUID
}

func unpackDeleteFaceParams(packed middleware.Parameters) (params DeleteFaceParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeDeleteFaceParams(args [1]string, argsEscaped bool, r *http.Request) (params DeleteFaceParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DeleteLibraryParams is parameters of deleteLibrary operation.
type DeleteLibraryParams struct {
	ID uuid.UUID
}

func unpackDeleteLibraryParams(packed middleware.Parameters) (params DeleteLibraryParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeDeleteLibraryParams(args [1]string, argsEscaped bool, r *http.Request) (params DeleteLibraryParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DeleteMemoryParams is parameters of deleteMemory operation.
type DeleteMemoryParams struct {
	ID uuid.UUID
}

func unpackDeleteMemoryParams(packed middleware.Parameters) (params DeleteMemoryParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeDeleteMemoryParams(args [1]string, argsEscaped bool, r *http.Request) (params DeleteMemoryParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DeleteNotificationParams is parameters of deleteNotification operation.
type DeleteNotificationParams struct {
	ID uuid.UUID
}

func unpackDeleteNotificationParams(packed middleware.Parameters) (params DeleteNotificationParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeDeleteNotificationParams(args [1]string, argsEscaped bool, r *http.Request) (params DeleteNotificationParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DeleteSessionParams is parameters of deleteSession operation.
type DeleteSessionParams struct {
	ID uuid.UUID
}

func unpackDeleteSessionParams(packed middleware.Parameters) (params DeleteSessionParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeDeleteSessionParams(args [1]string, argsEscaped bool, r *http.Request) (params DeleteSessionParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DeleteStackParams is parameters of deleteStack operation.
type DeleteStackParams struct {
	ID uuid.UUID
}

func unpackDeleteStackParams(packed middleware.Parameters) (params DeleteStackParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeDeleteStackParams(args [1]string, argsEscaped bool, r *http.Request) (params DeleteStackParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DeleteTagParams is parameters of deleteTag operation.
type DeleteTagParams struct {
	ID uuid.UUID
}

func unpackDeleteTagParams(packed middleware.Parameters) (params DeleteTagParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeDeleteTagParams(args [1]string, argsEscaped bool, r *http.Request) (params DeleteTagParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DeleteUserAdminParams is parameters of deleteUserAdmin operation.
type DeleteUserAdminParams struct {
	ID uuid.UUID
}

func unpackDeleteUserAdminParams(packed middleware.Parameters) (params DeleteUserAdminParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeDeleteUserAdminParams(args [1]string, argsEscaped bool, r *http.Request) (params DeleteUserAdminParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DownloadArchiveParams is parameters of downloadArchive operation.
type DownloadArchiveParams struct {
	Key OptString
}

func unpackDownloadArchiveParams(packed middleware.Parameters) (params DownloadArchiveParams) {
	{
		key := middleware.ParameterKey{
			Name: "key",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Key = v.(OptString)
		}
	}
	return params
}

func decodeDownloadArchiveParams(args [0]string, argsEscaped bool, r *http.Request) (params DownloadArchiveParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: key.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "key",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotKeyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotKeyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Key.SetTo(paramsDotKeyVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "key",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// DownloadAssetParams is parameters of downloadAsset operation.
type DownloadAssetParams struct {
	ID  uuid.UUID
	Key OptString
}

func unpackDownloadAssetParams(packed middleware.Parameters) (params DownloadAssetParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	{
		key := middleware.ParameterKey{
			Name: "key",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Key = v.(OptString)
		}
	}
	return params
}

func decodeDownloadAssetParams(args [1]string, argsEscaped bool, r *http.Request) (params DownloadAssetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: key.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "key",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotKeyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotKeyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Key.SetTo(paramsDotKeyVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "key",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetActivitiesParams is parameters of getActivities operation.
type GetActivitiesParams struct {
	AlbumId uuid.UUID
	AssetId OptUUID
	Level   OptReactionLevel
	Type    OptReactionType
	UserId  OptUUID
}

func unpackGetActivitiesParams(packed middleware.Parameters) (params GetActivitiesParams) {
	{
		key := middleware.ParameterKey{
			Name: "albumId",
			In:   "query",
		}
		params.AlbumId = packed[key].(uuid.UUID)
	}
	{
		key := middleware.ParameterKey{
			Name: "assetId",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.AssetId = v.(OptUUID)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "level",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Level = v.(OptReactionLevel)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "type",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Type = v.(OptReactionType)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "userId",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.UserId = v.(OptUUID)
		}
	}
	return params
}

func decodeGetActivitiesParams(args [0]string, argsEscaped bool, r *http.Request) (params GetActivitiesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: albumId.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "albumId",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.AlbumId = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "albumId",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: assetId.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "assetId",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAssetIdVal uuid.UUID
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToUUID(val)
					if err != nil {
						return err
					}

					paramsDotAssetIdVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AssetId.SetTo(paramsDotAssetIdVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "assetId",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: level.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "level",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLevelVal ReactionLevel
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLevelVal = ReactionLevel(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Level.SetTo(paramsDotLevelVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Level.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "level",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: type.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "type",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTypeVal ReactionType
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotTypeVal = ReactionType(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Type.SetTo(paramsDotTypeVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Type.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "type",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: userId.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "userId",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotUserIdVal uuid.UUID
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToUUID(val)
					if err != nil {
						return err
					}

					paramsDotUserIdVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.UserId.SetTo(paramsDotUserIdVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "userId",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetActivityStatisticsParams is parameters of getActivityStatistics operation.
type GetActivityStatisticsParams struct {
	AlbumId uuid.UUID
	AssetId OptUUID
}

func unpackGetActivityStatisticsParams(packed middleware.Parameters) (params GetActivityStatisticsParams) {
	{
		key := middleware.ParameterKey{
			Name: "albumId",
			In:   "query",
		}
		params.AlbumId = packed[key].(uuid.UUID)
	}
	{
		key := middleware.ParameterKey{
			Name: "assetId",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.AssetId = v.(OptUUID)
		}
	}
	return params
}

func decodeGetActivityStatisticsParams(args [0]string, argsEscaped bool, r *http.Request) (params GetActivityStatisticsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: albumId.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "albumId",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.AlbumId = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "albumId",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: assetId.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "assetId",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAssetIdVal uuid.UUID
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToUUID(val)
					if err != nil {
						return err
					}

					paramsDotAssetIdVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AssetId.SetTo(paramsDotAssetIdVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "assetId",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetAlbumInfoParams is parameters of getAlbumInfo operation.
type GetAlbumInfoParams struct {
	ID            uuid.UUID
	Key           OptString
	WithoutAssets OptBool
}

func unpackGetAlbumInfoParams(packed middleware.Parameters) (params GetAlbumInfoParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	{
		key := middleware.ParameterKey{
			Name: "key",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Key = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "withoutAssets",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.WithoutAssets = v.(OptBool)
		}
	}
	return params
}

func decodeGetAlbumInfoParams(args [1]string, argsEscaped bool, r *http.Request) (params GetAlbumInfoParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: key.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "key",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotKeyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotKeyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Key.SetTo(paramsDotKeyVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "key",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: withoutAssets.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "withoutAssets",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWithoutAssetsVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWithoutAssetsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.WithoutAssets.SetTo(paramsDotWithoutAssetsVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "withoutAssets",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetAllAlbumsParams is parameters of getAllAlbums operation.
type GetAllAlbumsParams struct {
	// Only returns albums that contain the asset
	// Ignores the shared parameter
	// undefined: get all albums.
	AssetId OptUUID
	Shared  OptBool
}

func unpackGetAllAlbumsParams(packed middleware.Parameters) (params GetAllAlbumsParams) {
	{
		key := middleware.ParameterKey{
			Name: "assetId",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.AssetId = v.(OptUUID)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "shared",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Shared = v.(OptBool)
		}
	}
	return params
}

func decodeGetAllAlbumsParams(args [0]string, argsEscaped bool, r *http.Request) (params GetAllAlbumsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: assetId.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "assetId",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAssetIdVal uuid.UUID
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToUUID(val)
					if err != nil {
						return err
					}

					paramsDotAssetIdVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AssetId.SetTo(paramsDotAssetIdVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "assetId",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: shared.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "shared",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSharedVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotSharedVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Shared.SetTo(paramsDotSharedVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "shared",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetAllPeopleParams is parameters of getAllPeople operation.
type GetAllPeopleParams struct {
	ClosestAssetId  OptUUID
	ClosestPersonId OptUUID
	// Page number for pagination.
	Page OptFloat64
	// Number of items per page.
	Size       OptFloat64
	WithHidden OptBool
}

func unpackGetAllPeopleParams(packed middleware.Parameters) (params GetAllPeopleParams) {
	{
		key := middleware.ParameterKey{
			Name: "closestAssetId",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.ClosestAssetId = v.(OptUUID)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "closestPersonId",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.ClosestPersonId = v.(OptUUID)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "page",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Page = v.(OptFloat64)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "size",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Size = v.(OptFloat64)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "withHidden",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.WithHidden = v.(OptBool)
		}
	}
	return params
}

func decodeGetAllPeopleParams(args [0]string, argsEscaped bool, r *http.Request) (params GetAllPeopleParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: closestAssetId.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "closestAssetId",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotClosestAssetIdVal uuid.UUID
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToUUID(val)
					if err != nil {
						return err
					}

					paramsDotClosestAssetIdVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ClosestAssetId.SetTo(paramsDotClosestAssetIdVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "closestAssetId",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: closestPersonId.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "closestPersonId",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotClosestPersonIdVal uuid.UUID
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToUUID(val)
					if err != nil {
						return err
					}

					paramsDotClosestPersonIdVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ClosestPersonId.SetTo(paramsDotClosestPersonIdVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "closestPersonId",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: page.
	{
		val := float64(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal float64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToFloat64(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Page.Get(); ok {
					if err := func() error {
						if err := (validate.Float{
							MinSet:        true,
							Min:           1,
							MaxSet:        false,
							Max:           0,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    nil,
						}).Validate(float64(value)); err != nil {
							return errors.Wrap(err, "float")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "page",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: size.
	{
		val := float64(500)
		params.Size.SetTo(val)
	}
	// Decode query: size.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "size",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSizeVal float64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToFloat64(val)
					if err != nil {
						return err
					}

					paramsDotSizeVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Size.SetTo(paramsDotSizeVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Size.Get(); ok {
					if err := func() error {
						if err := (validate.Float{
							MinSet:        true,
							Min:           1,
							MaxSet:        true,
							Max:           1000,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    nil,
						}).Validate(float64(value)); err != nil {
							return errors.Wrap(err, "float")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "size",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: withHidden.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "withHidden",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWithHiddenVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWithHiddenVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.WithHidden.SetTo(paramsDotWithHiddenVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "withHidden",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetAllSharedLinksParams is parameters of getAllSharedLinks operation.
type GetAllSharedLinksParams struct {
	AlbumId OptUUID
}

func unpackGetAllSharedLinksParams(packed middleware.Parameters) (params GetAllSharedLinksParams) {
	{
		key := middleware.ParameterKey{
			Name: "albumId",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.AlbumId = v.(OptUUID)
		}
	}
	return params
}

func decodeGetAllSharedLinksParams(args [0]string, argsEscaped bool, r *http.Request) (params GetAllSharedLinksParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: albumId.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "albumId",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAlbumIdVal uuid.UUID
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToUUID(val)
					if err != nil {
						return err
					}

					paramsDotAlbumIdVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AlbumId.SetTo(paramsDotAlbumIdVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "albumId",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetAllUserAssetsByDeviceIdParams is parameters of getAllUserAssetsByDeviceId operation.
type GetAllUserAssetsByDeviceIdParams struct {
	DeviceId string
}

func unpackGetAllUserAssetsByDeviceIdParams(packed middleware.Parameters) (params GetAllUserAssetsByDeviceIdParams) {
	{
		key := middleware.ParameterKey{
			Name: "deviceId",
			In:   "path",
		}
		params.DeviceId = packed[key].(string)
	}
	return params
}

func decodeGetAllUserAssetsByDeviceIdParams(args [1]string, argsEscaped bool, r *http.Request) (params GetAllUserAssetsByDeviceIdParams, _ error) {
	// Decode path: deviceId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "deviceId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.DeviceId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "deviceId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetApiKeyParams is parameters of getApiKey operation.
type GetApiKeyParams struct {
	ID uuid.UUID
}

func unpackGetApiKeyParams(packed middleware.Parameters) (params GetApiKeyParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeGetApiKeyParams(args [1]string, argsEscaped bool, r *http.Request) (params GetApiKeyParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetAssetInfoParams is parameters of getAssetInfo operation.
type GetAssetInfoParams struct {
	ID  uuid.UUID
	Key OptString
}

func unpackGetAssetInfoParams(packed middleware.Parameters) (params GetAssetInfoParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	{
		key := middleware.ParameterKey{
			Name: "key",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Key = v.(OptString)
		}
	}
	return params
}

func decodeGetAssetInfoParams(args [1]string, argsEscaped bool, r *http.Request) (params GetAssetInfoParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: key.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "key",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotKeyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotKeyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Key.SetTo(paramsDotKeyVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "key",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetAssetStatisticsParams is parameters of getAssetStatistics operation.
type GetAssetStatisticsParams struct {
	IsFavorite OptBool
	IsTrashed  OptBool
	Visibility OptAssetVisibility
}

func unpackGetAssetStatisticsParams(packed middleware.Parameters) (params GetAssetStatisticsParams) {
	{
		key := middleware.ParameterKey{
			Name: "isFavorite",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.IsFavorite = v.(OptBool)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "isTrashed",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.IsTrashed = v.(OptBool)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "visibility",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Visibility = v.(OptAssetVisibility)
		}
	}
	return params
}

func decodeGetAssetStatisticsParams(args [0]string, argsEscaped bool, r *http.Request) (params GetAssetStatisticsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: isFavorite.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "isFavorite",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotIsFavoriteVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotIsFavoriteVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.IsFavorite.SetTo(paramsDotIsFavoriteVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "isFavorite",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: isTrashed.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "isTrashed",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotIsTrashedVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotIsTrashedVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.IsTrashed.SetTo(paramsDotIsTrashedVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "isTrashed",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: visibility.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "visibility",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotVisibilityVal AssetVisibility
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotVisibilityVal = AssetVisibility(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Visibility.SetTo(paramsDotVisibilityVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Visibility.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "visibility",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetAssetsByOriginalPathParams is parameters of getAssetsByOriginalPath operation.
type GetAssetsByOriginalPathParams struct {
	Path string
}

func unpackGetAssetsByOriginalPathParams(packed middleware.Parameters) (params GetAssetsByOriginalPathParams) {
	{
		key := middleware.ParameterKey{
			Name: "path",
			In:   "query",
		}
		params.Path = packed[key].(string)
	}
	return params
}

func decodeGetAssetsByOriginalPathParams(args [0]string, argsEscaped bool, r *http.Request) (params GetAssetsByOriginalPathParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: path.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "path",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Path = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "path",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetDownloadInfoParams is parameters of getDownloadInfo operation.
type GetDownloadInfoParams struct {
	Key OptString
}

func unpackGetDownloadInfoParams(packed middleware.Parameters) (params GetDownloadInfoParams) {
	{
		key := middleware.ParameterKey{
			Name: "key",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Key = v.(OptString)
		}
	}
	return params
}

func decodeGetDownloadInfoParams(args [0]string, argsEscaped bool, r *http.Request) (params GetDownloadInfoParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: key.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "key",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotKeyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotKeyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Key.SetTo(paramsDotKeyVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "key",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetFacesParams is parameters of getFaces operation.
type GetFacesParams struct {
	ID uuid.UUID
}

func unpackGetFacesParams(packed middleware.Parameters) (params GetFacesParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "query",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeGetFacesParams(args [0]string, argsEscaped bool, r *http.Request) (params GetFacesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: id.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "id",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetLibraryParams is parameters of getLibrary operation.
type GetLibraryParams struct {
	ID uuid.UUID
}

func unpackGetLibraryParams(packed middleware.Parameters) (params GetLibraryParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeGetLibraryParams(args [1]string, argsEscaped bool, r *http.Request) (params GetLibraryParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetLibraryStatisticsParams is parameters of getLibraryStatistics operation.
type GetLibraryStatisticsParams struct {
	ID uuid.UUID
}

func unpackGetLibraryStatisticsParams(packed middleware.Parameters) (params GetLibraryStatisticsParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeGetLibraryStatisticsParams(args [1]string, argsEscaped bool, r *http.Request) (params GetLibraryStatisticsParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetMapMarkersParams is parameters of getMapMarkers operation.
type GetMapMarkersParams struct {
	FileCreatedAfter  OptDateTime
	FileCreatedBefore OptDateTime
	IsArchived        OptBool
	IsFavorite        OptBool
	WithPartners      OptBool
	WithSharedAlbums  OptBool
}

func unpackGetMapMarkersParams(packed middleware.Parameters) (params GetMapMarkersParams) {
	{
		key := middleware.ParameterKey{
			Name: "fileCreatedAfter",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.FileCreatedAfter = v.(OptDateTime)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "fileCreatedBefore",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.FileCreatedBefore = v.(OptDateTime)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "isArchived",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.IsArchived = v.(OptBool)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "isFavorite",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.IsFavorite = v.(OptBool)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "withPartners",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.WithPartners = v.(OptBool)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "withSharedAlbums",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.WithSharedAlbums = v.(OptBool)
		}
	}
	return params
}

func decodeGetMapMarkersParams(args [0]string, argsEscaped bool, r *http.Request) (params GetMapMarkersParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: fileCreatedAfter.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fileCreatedAfter",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFileCreatedAfterVal time.Time
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToDateTime(val)
					if err != nil {
						return err
					}

					paramsDotFileCreatedAfterVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FileCreatedAfter.SetTo(paramsDotFileCreatedAfterVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "fileCreatedAfter",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: fileCreatedBefore.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fileCreatedBefore",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFileCreatedBeforeVal time.Time
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToDateTime(val)
					if err != nil {
						return err
					}

					paramsDotFileCreatedBeforeVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FileCreatedBefore.SetTo(paramsDotFileCreatedBeforeVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "fileCreatedBefore",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: isArchived.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "isArchived",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotIsArchivedVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotIsArchivedVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.IsArchived.SetTo(paramsDotIsArchivedVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "isArchived",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: isFavorite.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "isFavorite",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotIsFavoriteVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotIsFavoriteVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.IsFavorite.SetTo(paramsDotIsFavoriteVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "isFavorite",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: withPartners.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "withPartners",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWithPartnersVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWithPartnersVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.WithPartners.SetTo(paramsDotWithPartnersVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "withPartners",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: withSharedAlbums.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "withSharedAlbums",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWithSharedAlbumsVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWithSharedAlbumsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.WithSharedAlbums.SetTo(paramsDotWithSharedAlbumsVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "withSharedAlbums",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetMemoryParams is parameters of getMemory operation.
type GetMemoryParams struct {
	ID uuid.UUID
}

func unpackGetMemoryParams(packed middleware.Parameters) (params GetMemoryParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeGetMemoryParams(args [1]string, argsEscaped bool, r *http.Request) (params GetMemoryParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetMySharedLinkParams is parameters of getMySharedLink operation.
type GetMySharedLinkParams struct {
	Key      OptString
	Password OptString
	Token    OptString
}

func unpackGetMySharedLinkParams(packed middleware.Parameters) (params GetMySharedLinkParams) {
	{
		key := middleware.ParameterKey{
			Name: "key",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Key = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "password",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Password = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "token",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Token = v.(OptString)
		}
	}
	return params
}

func decodeGetMySharedLinkParams(args [0]string, argsEscaped bool, r *http.Request) (params GetMySharedLinkParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: key.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "key",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotKeyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotKeyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Key.SetTo(paramsDotKeyVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "key",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: password.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "password",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPasswordVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPasswordVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Password.SetTo(paramsDotPasswordVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "password",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: token.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "token",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTokenVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotTokenVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Token.SetTo(paramsDotTokenVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "token",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetNotificationParams is parameters of getNotification operation.
type GetNotificationParams struct {
	ID uuid.UUID
}

func unpackGetNotificationParams(packed middleware.Parameters) (params GetNotificationParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeGetNotificationParams(args [1]string, argsEscaped bool, r *http.Request) (params GetNotificationParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetNotificationTemplateAdminParams is parameters of getNotificationTemplateAdmin operation.
type GetNotificationTemplateAdminParams struct {
	Name string
}

func unpackGetNotificationTemplateAdminParams(packed middleware.Parameters) (params GetNotificationTemplateAdminParams) {
	{
		key := middleware.ParameterKey{
			Name: "name",
			In:   "path",
		}
		params.Name = packed[key].(string)
	}
	return params
}

func decodeGetNotificationTemplateAdminParams(args [1]string, argsEscaped bool, r *http.Request) (params GetNotificationTemplateAdminParams, _ error) {
	// Decode path: name.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "name",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetNotificationsParams is parameters of getNotifications operation.
type GetNotificationsParams struct {
	ID     OptUUID
	Level  OptNotificationLevel
	Type   OptNotificationType
	Unread OptBool
}

func unpackGetNotificationsParams(packed middleware.Parameters) (params GetNotificationsParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.ID = v.(OptUUID)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "level",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Level = v.(OptNotificationLevel)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "type",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Type = v.(OptNotificationType)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "unread",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Unread = v.(OptBool)
		}
	}
	return params
}

func decodeGetNotificationsParams(args [0]string, argsEscaped bool, r *http.Request) (params GetNotificationsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: id.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "id",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotIDVal uuid.UUID
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToUUID(val)
					if err != nil {
						return err
					}

					paramsDotIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ID.SetTo(paramsDotIDVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: level.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "level",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLevelVal NotificationLevel
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLevelVal = NotificationLevel(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Level.SetTo(paramsDotLevelVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Level.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "level",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: type.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "type",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTypeVal NotificationType
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotTypeVal = NotificationType(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Type.SetTo(paramsDotTypeVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Type.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "type",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: unread.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "unread",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotUnreadVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotUnreadVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Unread.SetTo(paramsDotUnreadVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "unread",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetPartnersParams is parameters of getPartners operation.
type GetPartnersParams struct {
	Direction PartnerDirection
}

func unpackGetPartnersParams(packed middleware.Parameters) (params GetPartnersParams) {
	{
		key := middleware.ParameterKey{
			Name: "direction",
			In:   "query",
		}
		params.Direction = packed[key].(PartnerDirection)
	}
	return params
}

func decodeGetPartnersParams(args [0]string, argsEscaped bool, r *http.Request) (params GetPartnersParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: direction.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "direction",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Direction = PartnerDirection(c)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if err := params.Direction.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "direction",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetPersonParams is parameters of getPerson operation.
type GetPersonParams struct {
	ID uuid.UUID
}

func unpackGetPersonParams(packed middleware.Parameters) (params GetPersonParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeGetPersonParams(args [1]string, argsEscaped bool, r *http.Request) (params GetPersonParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetPersonStatisticsParams is parameters of getPersonStatistics operation.
type GetPersonStatisticsParams struct {
	ID uuid.UUID
}

func unpackGetPersonStatisticsParams(packed middleware.Parameters) (params GetPersonStatisticsParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeGetPersonStatisticsParams(args [1]string, argsEscaped bool, r *http.Request) (params GetPersonStatisticsParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetPersonThumbnailParams is parameters of getPersonThumbnail operation.
type GetPersonThumbnailParams struct {
	ID uuid.UUID
}

func unpackGetPersonThumbnailParams(packed middleware.Parameters) (params GetPersonThumbnailParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeGetPersonThumbnailParams(args [1]string, argsEscaped bool, r *http.Request) (params GetPersonThumbnailParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetProfileImageParams is parameters of getProfileImage operation.
type GetProfileImageParams struct {
	ID uuid.UUID
}

func unpackGetProfileImageParams(packed middleware.Parameters) (params GetProfileImageParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeGetProfileImageParams(args [1]string, argsEscaped bool, r *http.Request) (params GetProfileImageParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetRandomParams is parameters of getRandom operation.
type GetRandomParams struct {
	Count OptFloat64
}

func unpackGetRandomParams(packed middleware.Parameters) (params GetRandomParams) {
	{
		key := middleware.ParameterKey{
			Name: "count",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Count = v.(OptFloat64)
		}
	}
	return params
}

func decodeGetRandomParams(args [0]string, argsEscaped bool, r *http.Request) (params GetRandomParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: count.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "count",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotCountVal float64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToFloat64(val)
					if err != nil {
						return err
					}

					paramsDotCountVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Count.SetTo(paramsDotCountVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Count.Get(); ok {
					if err := func() error {
						if err := (validate.Float{
							MinSet:        true,
							Min:           1,
							MaxSet:        false,
							Max:           0,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    nil,
						}).Validate(float64(value)); err != nil {
							return errors.Wrap(err, "float")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "count",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetSearchSuggestionsParams is parameters of getSearchSuggestions operation.
type GetSearchSuggestionsParams struct {
	Country OptString
	// This property was added in v111.0.0.
	IncludeNull OptBool
	Make        OptString
	Model       OptString
	State       OptString
	Type        SearchSuggestionType
}

func unpackGetSearchSuggestionsParams(packed middleware.Parameters) (params GetSearchSuggestionsParams) {
	{
		key := middleware.ParameterKey{
			Name: "country",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Country = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "includeNull",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.IncludeNull = v.(OptBool)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "make",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Make = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "model",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Model = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "state",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.State = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "type",
			In:   "query",
		}
		params.Type = packed[key].(SearchSuggestionType)
	}
	return params
}

func decodeGetSearchSuggestionsParams(args [0]string, argsEscaped bool, r *http.Request) (params GetSearchSuggestionsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: country.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "country",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotCountryVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotCountryVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Country.SetTo(paramsDotCountryVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "country",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: includeNull.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "includeNull",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotIncludeNullVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotIncludeNullVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.IncludeNull.SetTo(paramsDotIncludeNullVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "includeNull",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: make.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "make",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotMakeVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotMakeVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Make.SetTo(paramsDotMakeVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "make",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: model.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "model",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotModelVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotModelVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Model.SetTo(paramsDotModelVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "model",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: state.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "state",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotStateVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotStateVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.State.SetTo(paramsDotStateVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "state",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: type.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "type",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Type = SearchSuggestionType(c)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if err := params.Type.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "type",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetSharedLinkByIdParams is parameters of getSharedLinkById operation.
type GetSharedLinkByIdParams struct {
	ID uuid.UUID
}

func unpackGetSharedLinkByIdParams(packed middleware.Parameters) (params GetSharedLinkByIdParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeGetSharedLinkByIdParams(args [1]string, argsEscaped bool, r *http.Request) (params GetSharedLinkByIdParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetStackParams is parameters of getStack operation.
type GetStackParams struct {
	ID uuid.UUID
}

func unpackGetStackParams(packed middleware.Parameters) (params GetStackParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeGetStackParams(args [1]string, argsEscaped bool, r *http.Request) (params GetStackParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetTagByIdParams is parameters of getTagById operation.
type GetTagByIdParams struct {
	ID uuid.UUID
}

func unpackGetTagByIdParams(packed middleware.Parameters) (params GetTagByIdParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeGetTagByIdParams(args [1]string, argsEscaped bool, r *http.Request) (params GetTagByIdParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetTimeBucketParams is parameters of getTimeBucket operation.
type GetTimeBucketParams struct {
	AlbumId      OptUUID
	IsFavorite   OptBool
	IsTrashed    OptBool
	Key          OptString
	Order        OptAssetOrder
	PersonId     OptUUID
	TagId        OptUUID
	TimeBucket   string
	UserId       OptUUID
	Visibility   OptAssetVisibility
	WithPartners OptBool
	WithStacked  OptBool
}

func unpackGetTimeBucketParams(packed middleware.Parameters) (params GetTimeBucketParams) {
	{
		key := middleware.ParameterKey{
			Name: "albumId",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.AlbumId = v.(OptUUID)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "isFavorite",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.IsFavorite = v.(OptBool)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "isTrashed",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.IsTrashed = v.(OptBool)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "key",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Key = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "order",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Order = v.(OptAssetOrder)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "personId",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PersonId = v.(OptUUID)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "tagId",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.TagId = v.(OptUUID)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "timeBucket",
			In:   "query",
		}
		params.TimeBucket = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "userId",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.UserId = v.(OptUUID)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "visibility",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Visibility = v.(OptAssetVisibility)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "withPartners",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.WithPartners = v.(OptBool)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "withStacked",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.WithStacked = v.(OptBool)
		}
	}
	return params
}

func decodeGetTimeBucketParams(args [0]string, argsEscaped bool, r *http.Request) (params GetTimeBucketParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: albumId.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "albumId",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAlbumIdVal uuid.UUID
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToUUID(val)
					if err != nil {
						return err
					}

					paramsDotAlbumIdVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AlbumId.SetTo(paramsDotAlbumIdVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "albumId",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: isFavorite.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "isFavorite",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotIsFavoriteVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotIsFavoriteVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.IsFavorite.SetTo(paramsDotIsFavoriteVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "isFavorite",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: isTrashed.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "isTrashed",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotIsTrashedVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotIsTrashedVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.IsTrashed.SetTo(paramsDotIsTrashedVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "isTrashed",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: key.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "key",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotKeyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotKeyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Key.SetTo(paramsDotKeyVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "key",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: order.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "order",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotOrderVal AssetOrder
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotOrderVal = AssetOrder(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Order.SetTo(paramsDotOrderVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Order.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "order",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: personId.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "personId",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPersonIdVal uuid.UUID
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToUUID(val)
					if err != nil {
						return err
					}

					paramsDotPersonIdVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PersonId.SetTo(paramsDotPersonIdVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "personId",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: tagId.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "tagId",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTagIdVal uuid.UUID
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToUUID(val)
					if err != nil {
						return err
					}

					paramsDotTagIdVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TagId.SetTo(paramsDotTagIdVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "tagId",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: timeBucket.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeBucket",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.TimeBucket = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "timeBucket",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: userId.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "userId",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotUserIdVal uuid.UUID
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToUUID(val)
					if err != nil {
						return err
					}

					paramsDotUserIdVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.UserId.SetTo(paramsDotUserIdVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "userId",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: visibility.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "visibility",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotVisibilityVal AssetVisibility
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotVisibilityVal = AssetVisibility(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Visibility.SetTo(paramsDotVisibilityVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Visibility.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "visibility",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: withPartners.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "withPartners",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWithPartnersVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWithPartnersVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.WithPartners.SetTo(paramsDotWithPartnersVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "withPartners",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: withStacked.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "withStacked",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWithStackedVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWithStackedVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.WithStacked.SetTo(paramsDotWithStackedVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "withStacked",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetTimeBucketsParams is parameters of getTimeBuckets operation.
type GetTimeBucketsParams struct {
	AlbumId      OptUUID
	IsFavorite   OptBool
	IsTrashed    OptBool
	Key          OptString
	Order        OptAssetOrder
	PersonId     OptUUID
	TagId        OptUUID
	UserId       OptUUID
	Visibility   OptAssetVisibility
	WithPartners OptBool
	WithStacked  OptBool
}

func unpackGetTimeBucketsParams(packed middleware.Parameters) (params GetTimeBucketsParams) {
	{
		key := middleware.ParameterKey{
			Name: "albumId",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.AlbumId = v.(OptUUID)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "isFavorite",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.IsFavorite = v.(OptBool)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "isTrashed",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.IsTrashed = v.(OptBool)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "key",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Key = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "order",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Order = v.(OptAssetOrder)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "personId",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PersonId = v.(OptUUID)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "tagId",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.TagId = v.(OptUUID)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "userId",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.UserId = v.(OptUUID)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "visibility",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Visibility = v.(OptAssetVisibility)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "withPartners",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.WithPartners = v.(OptBool)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "withStacked",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.WithStacked = v.(OptBool)
		}
	}
	return params
}

func decodeGetTimeBucketsParams(args [0]string, argsEscaped bool, r *http.Request) (params GetTimeBucketsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: albumId.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "albumId",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAlbumIdVal uuid.UUID
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToUUID(val)
					if err != nil {
						return err
					}

					paramsDotAlbumIdVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AlbumId.SetTo(paramsDotAlbumIdVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "albumId",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: isFavorite.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "isFavorite",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotIsFavoriteVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotIsFavoriteVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.IsFavorite.SetTo(paramsDotIsFavoriteVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "isFavorite",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: isTrashed.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "isTrashed",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotIsTrashedVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotIsTrashedVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.IsTrashed.SetTo(paramsDotIsTrashedVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "isTrashed",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: key.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "key",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotKeyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotKeyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Key.SetTo(paramsDotKeyVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "key",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: order.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "order",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotOrderVal AssetOrder
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotOrderVal = AssetOrder(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Order.SetTo(paramsDotOrderVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Order.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "order",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: personId.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "personId",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPersonIdVal uuid.UUID
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToUUID(val)
					if err != nil {
						return err
					}

					paramsDotPersonIdVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PersonId.SetTo(paramsDotPersonIdVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "personId",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: tagId.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "tagId",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTagIdVal uuid.UUID
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToUUID(val)
					if err != nil {
						return err
					}

					paramsDotTagIdVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TagId.SetTo(paramsDotTagIdVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "tagId",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: userId.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "userId",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotUserIdVal uuid.UUID
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToUUID(val)
					if err != nil {
						return err
					}

					paramsDotUserIdVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.UserId.SetTo(paramsDotUserIdVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "userId",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: visibility.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "visibility",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotVisibilityVal AssetVisibility
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotVisibilityVal = AssetVisibility(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Visibility.SetTo(paramsDotVisibilityVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Visibility.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "visibility",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: withPartners.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "withPartners",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWithPartnersVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWithPartnersVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.WithPartners.SetTo(paramsDotWithPartnersVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "withPartners",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: withStacked.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "withStacked",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWithStackedVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWithStackedVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.WithStacked.SetTo(paramsDotWithStackedVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "withStacked",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetUserParams is parameters of getUser operation.
type GetUserParams struct {
	ID uuid.UUID
}

func unpackGetUserParams(packed middleware.Parameters) (params GetUserParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeGetUserParams(args [1]string, argsEscaped bool, r *http.Request) (params GetUserParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetUserAdminParams is parameters of getUserAdmin operation.
type GetUserAdminParams struct {
	ID uuid.UUID
}

func unpackGetUserAdminParams(packed middleware.Parameters) (params GetUserAdminParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeGetUserAdminParams(args [1]string, argsEscaped bool, r *http.Request) (params GetUserAdminParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetUserPreferencesAdminParams is parameters of getUserPreferencesAdmin operation.
type GetUserPreferencesAdminParams struct {
	ID uuid.UUID
}

func unpackGetUserPreferencesAdminParams(packed middleware.Parameters) (params GetUserPreferencesAdminParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeGetUserPreferencesAdminParams(args [1]string, argsEscaped bool, r *http.Request) (params GetUserPreferencesAdminParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetUserStatisticsAdminParams is parameters of getUserStatisticsAdmin operation.
type GetUserStatisticsAdminParams struct {
	ID         uuid.UUID
	IsFavorite OptBool
	IsTrashed  OptBool
	Visibility OptAssetVisibility
}

func unpackGetUserStatisticsAdminParams(packed middleware.Parameters) (params GetUserStatisticsAdminParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	{
		key := middleware.ParameterKey{
			Name: "isFavorite",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.IsFavorite = v.(OptBool)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "isTrashed",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.IsTrashed = v.(OptBool)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "visibility",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Visibility = v.(OptAssetVisibility)
		}
	}
	return params
}

func decodeGetUserStatisticsAdminParams(args [1]string, argsEscaped bool, r *http.Request) (params GetUserStatisticsAdminParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: isFavorite.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "isFavorite",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotIsFavoriteVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotIsFavoriteVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.IsFavorite.SetTo(paramsDotIsFavoriteVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "isFavorite",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: isTrashed.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "isTrashed",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotIsTrashedVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotIsTrashedVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.IsTrashed.SetTo(paramsDotIsTrashedVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "isTrashed",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: visibility.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "visibility",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotVisibilityVal AssetVisibility
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotVisibilityVal = AssetVisibility(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Visibility.SetTo(paramsDotVisibilityVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Visibility.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "visibility",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// LockSessionParams is parameters of lockSession operation.
type LockSessionParams struct {
	ID uuid.UUID
}

func unpackLockSessionParams(packed middleware.Parameters) (params LockSessionParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeLockSessionParams(args [1]string, argsEscaped bool, r *http.Request) (params LockSessionParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// MergePersonParams is parameters of mergePerson operation.
type MergePersonParams struct {
	ID uuid.UUID
}

func unpackMergePersonParams(packed middleware.Parameters) (params MergePersonParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeMergePersonParams(args [1]string, argsEscaped bool, r *http.Request) (params MergePersonParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// PlayAssetVideoParams is parameters of playAssetVideo operation.
type PlayAssetVideoParams struct {
	ID  uuid.UUID
	Key OptString
}

func unpackPlayAssetVideoParams(packed middleware.Parameters) (params PlayAssetVideoParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	{
		key := middleware.ParameterKey{
			Name: "key",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Key = v.(OptString)
		}
	}
	return params
}

func decodePlayAssetVideoParams(args [1]string, argsEscaped bool, r *http.Request) (params PlayAssetVideoParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: key.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "key",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotKeyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotKeyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Key.SetTo(paramsDotKeyVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "key",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// ReassignFacesParams is parameters of reassignFaces operation.
type ReassignFacesParams struct {
	ID uuid.UUID
}

func unpackReassignFacesParams(packed middleware.Parameters) (params ReassignFacesParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeReassignFacesParams(args [1]string, argsEscaped bool, r *http.Request) (params ReassignFacesParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// ReassignFacesByIdParams is parameters of reassignFacesById operation.
type ReassignFacesByIdParams struct {
	ID uuid.UUID
}

func unpackReassignFacesByIdParams(packed middleware.Parameters) (params ReassignFacesByIdParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeReassignFacesByIdParams(args [1]string, argsEscaped bool, r *http.Request) (params ReassignFacesByIdParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// RemoveAssetFromAlbumParams is parameters of removeAssetFromAlbum operation.
type RemoveAssetFromAlbumParams struct {
	ID uuid.UUID
}

func unpackRemoveAssetFromAlbumParams(packed middleware.Parameters) (params RemoveAssetFromAlbumParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeRemoveAssetFromAlbumParams(args [1]string, argsEscaped bool, r *http.Request) (params RemoveAssetFromAlbumParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// RemoveMemoryAssetsParams is parameters of removeMemoryAssets operation.
type RemoveMemoryAssetsParams struct {
	ID uuid.UUID
}

func unpackRemoveMemoryAssetsParams(packed middleware.Parameters) (params RemoveMemoryAssetsParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeRemoveMemoryAssetsParams(args [1]string, argsEscaped bool, r *http.Request) (params RemoveMemoryAssetsParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// RemovePartnerParams is parameters of removePartner operation.
type RemovePartnerParams struct {
	ID uuid.UUID
}

func unpackRemovePartnerParams(packed middleware.Parameters) (params RemovePartnerParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeRemovePartnerParams(args [1]string, argsEscaped bool, r *http.Request) (params RemovePartnerParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// RemoveSharedLinkParams is parameters of removeSharedLink operation.
type RemoveSharedLinkParams struct {
	ID uuid.UUID
}

func unpackRemoveSharedLinkParams(packed middleware.Parameters) (params RemoveSharedLinkParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeRemoveSharedLinkParams(args [1]string, argsEscaped bool, r *http.Request) (params RemoveSharedLinkParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// RemoveSharedLinkAssetsParams is parameters of removeSharedLinkAssets operation.
type RemoveSharedLinkAssetsParams struct {
	ID  uuid.UUID
	Key OptString
}

func unpackRemoveSharedLinkAssetsParams(packed middleware.Parameters) (params RemoveSharedLinkAssetsParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	{
		key := middleware.ParameterKey{
			Name: "key",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Key = v.(OptString)
		}
	}
	return params
}

func decodeRemoveSharedLinkAssetsParams(args [1]string, argsEscaped bool, r *http.Request) (params RemoveSharedLinkAssetsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: key.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "key",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotKeyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotKeyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Key.SetTo(paramsDotKeyVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "key",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// RemoveUserFromAlbumParams is parameters of removeUserFromAlbum operation.
type RemoveUserFromAlbumParams struct {
	ID     uuid.UUID
	UserId string
}

func unpackRemoveUserFromAlbumParams(packed middleware.Parameters) (params RemoveUserFromAlbumParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	{
		key := middleware.ParameterKey{
			Name: "userId",
			In:   "path",
		}
		params.UserId = packed[key].(string)
	}
	return params
}

func decodeRemoveUserFromAlbumParams(args [2]string, argsEscaped bool, r *http.Request) (params RemoveUserFromAlbumParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: userId.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "userId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.UserId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "userId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// ReplaceAssetParams is parameters of replaceAsset operation.
type ReplaceAssetParams struct {
	ID  uuid.UUID
	Key OptString
}

func unpackReplaceAssetParams(packed middleware.Parameters) (params ReplaceAssetParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	{
		key := middleware.ParameterKey{
			Name: "key",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Key = v.(OptString)
		}
	}
	return params
}

func decodeReplaceAssetParams(args [1]string, argsEscaped bool, r *http.Request) (params ReplaceAssetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: key.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "key",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotKeyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotKeyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Key.SetTo(paramsDotKeyVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "key",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// RestoreUserAdminParams is parameters of restoreUserAdmin operation.
type RestoreUserAdminParams struct {
	ID uuid.UUID
}

func unpackRestoreUserAdminParams(packed middleware.Parameters) (params RestoreUserAdminParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeRestoreUserAdminParams(args [1]string, argsEscaped bool, r *http.Request) (params RestoreUserAdminParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// ReverseGeocodeParams is parameters of reverseGeocode operation.
type ReverseGeocodeParams struct {
	Lat float64
	Lon float64
}

func unpackReverseGeocodeParams(packed middleware.Parameters) (params ReverseGeocodeParams) {
	{
		key := middleware.ParameterKey{
			Name: "lat",
			In:   "query",
		}
		params.Lat = packed[key].(float64)
	}
	{
		key := middleware.ParameterKey{
			Name: "lon",
			In:   "query",
		}
		params.Lon = packed[key].(float64)
	}
	return params
}

func decodeReverseGeocodeParams(args [0]string, argsEscaped bool, r *http.Request) (params ReverseGeocodeParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: lat.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "lat",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToFloat64(val)
				if err != nil {
					return err
				}

				params.Lat = c
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(params.Lat)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "lat",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: lon.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "lon",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToFloat64(val)
				if err != nil {
					return err
				}

				params.Lon = c
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(params.Lon)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "lon",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// ScanLibraryParams is parameters of scanLibrary operation.
type ScanLibraryParams struct {
	ID uuid.UUID
}

func unpackScanLibraryParams(packed middleware.Parameters) (params ScanLibraryParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeScanLibraryParams(args [1]string, argsEscaped bool, r *http.Request) (params ScanLibraryParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// SearchMemoriesParams is parameters of searchMemories operation.
type SearchMemoriesParams struct {
	For       OptDateTime
	IsSaved   OptBool
	IsTrashed OptBool
	Type      OptMemoryType
}

func unpackSearchMemoriesParams(packed middleware.Parameters) (params SearchMemoriesParams) {
	{
		key := middleware.ParameterKey{
			Name: "for",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.For = v.(OptDateTime)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "isSaved",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.IsSaved = v.(OptBool)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "isTrashed",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.IsTrashed = v.(OptBool)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "type",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Type = v.(OptMemoryType)
		}
	}
	return params
}

func decodeSearchMemoriesParams(args [0]string, argsEscaped bool, r *http.Request) (params SearchMemoriesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: for.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "for",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotForVal time.Time
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToDateTime(val)
					if err != nil {
						return err
					}

					paramsDotForVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.For.SetTo(paramsDotForVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "for",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: isSaved.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "isSaved",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotIsSavedVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotIsSavedVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.IsSaved.SetTo(paramsDotIsSavedVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "isSaved",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: isTrashed.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "isTrashed",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotIsTrashedVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotIsTrashedVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.IsTrashed.SetTo(paramsDotIsTrashedVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "isTrashed",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: type.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "type",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTypeVal MemoryType
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotTypeVal = MemoryType(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Type.SetTo(paramsDotTypeVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Type.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "type",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// SearchPersonParams is parameters of searchPerson operation.
type SearchPersonParams struct {
	Name       string
	WithHidden OptBool
}

func unpackSearchPersonParams(packed middleware.Parameters) (params SearchPersonParams) {
	{
		key := middleware.ParameterKey{
			Name: "name",
			In:   "query",
		}
		params.Name = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "withHidden",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.WithHidden = v.(OptBool)
		}
	}
	return params
}

func decodeSearchPersonParams(args [0]string, argsEscaped bool, r *http.Request) (params SearchPersonParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: name.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "name",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "name",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: withHidden.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "withHidden",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWithHiddenVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWithHiddenVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.WithHidden.SetTo(paramsDotWithHiddenVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "withHidden",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// SearchPlacesParams is parameters of searchPlaces operation.
type SearchPlacesParams struct {
	Name string
}

func unpackSearchPlacesParams(packed middleware.Parameters) (params SearchPlacesParams) {
	{
		key := middleware.ParameterKey{
			Name: "name",
			In:   "query",
		}
		params.Name = packed[key].(string)
	}
	return params
}

func decodeSearchPlacesParams(args [0]string, argsEscaped bool, r *http.Request) (params SearchPlacesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: name.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "name",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "name",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// SearchStacksParams is parameters of searchStacks operation.
type SearchStacksParams struct {
	PrimaryAssetId OptUUID
}

func unpackSearchStacksParams(packed middleware.Parameters) (params SearchStacksParams) {
	{
		key := middleware.ParameterKey{
			Name: "primaryAssetId",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PrimaryAssetId = v.(OptUUID)
		}
	}
	return params
}

func decodeSearchStacksParams(args [0]string, argsEscaped bool, r *http.Request) (params SearchStacksParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: primaryAssetId.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "primaryAssetId",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrimaryAssetIdVal uuid.UUID
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToUUID(val)
					if err != nil {
						return err
					}

					paramsDotPrimaryAssetIdVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PrimaryAssetId.SetTo(paramsDotPrimaryAssetIdVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "primaryAssetId",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// SearchUsersAdminParams is parameters of searchUsersAdmin operation.
type SearchUsersAdminParams struct {
	ID          OptUUID
	WithDeleted OptBool
}

func unpackSearchUsersAdminParams(packed middleware.Parameters) (params SearchUsersAdminParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.ID = v.(OptUUID)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "withDeleted",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.WithDeleted = v.(OptBool)
		}
	}
	return params
}

func decodeSearchUsersAdminParams(args [0]string, argsEscaped bool, r *http.Request) (params SearchUsersAdminParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: id.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "id",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotIDVal uuid.UUID
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToUUID(val)
					if err != nil {
						return err
					}

					paramsDotIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ID.SetTo(paramsDotIDVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: withDeleted.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "withDeleted",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWithDeletedVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotWithDeletedVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.WithDeleted.SetTo(paramsDotWithDeletedVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "withDeleted",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// SendJobCommandParams is parameters of sendJobCommand operation.
type SendJobCommandParams struct {
	ID JobName
}

func unpackSendJobCommandParams(packed middleware.Parameters) (params SendJobCommandParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(JobName)
	}
	return params
}

func decodeSendJobCommandParams(args [1]string, argsEscaped bool, r *http.Request) (params SendJobCommandParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ID = JobName(c)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.ID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// TagAssetsParams is parameters of tagAssets operation.
type TagAssetsParams struct {
	ID uuid.UUID
}

func unpackTagAssetsParams(packed middleware.Parameters) (params TagAssetsParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeTagAssetsParams(args [1]string, argsEscaped bool, r *http.Request) (params TagAssetsParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// UntagAssetsParams is parameters of untagAssets operation.
type UntagAssetsParams struct {
	ID uuid.UUID
}

func unpackUntagAssetsParams(packed middleware.Parameters) (params UntagAssetsParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeUntagAssetsParams(args [1]string, argsEscaped bool, r *http.Request) (params UntagAssetsParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// UpdateAlbumInfoParams is parameters of updateAlbumInfo operation.
type UpdateAlbumInfoParams struct {
	ID uuid.UUID
}

func unpackUpdateAlbumInfoParams(packed middleware.Parameters) (params UpdateAlbumInfoParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeUpdateAlbumInfoParams(args [1]string, argsEscaped bool, r *http.Request) (params UpdateAlbumInfoParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// UpdateAlbumUserParams is parameters of updateAlbumUser operation.
type UpdateAlbumUserParams struct {
	ID     uuid.UUID
	UserId string
}

func unpackUpdateAlbumUserParams(packed middleware.Parameters) (params UpdateAlbumUserParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	{
		key := middleware.ParameterKey{
			Name: "userId",
			In:   "path",
		}
		params.UserId = packed[key].(string)
	}
	return params
}

func decodeUpdateAlbumUserParams(args [2]string, argsEscaped bool, r *http.Request) (params UpdateAlbumUserParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: userId.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "userId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.UserId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "userId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// UpdateApiKeyParams is parameters of updateApiKey operation.
type UpdateApiKeyParams struct {
	ID uuid.UUID
}

func unpackUpdateApiKeyParams(packed middleware.Parameters) (params UpdateApiKeyParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeUpdateApiKeyParams(args [1]string, argsEscaped bool, r *http.Request) (params UpdateApiKeyParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// UpdateAssetParams is parameters of updateAsset operation.
type UpdateAssetParams struct {
	ID uuid.UUID
}

func unpackUpdateAssetParams(packed middleware.Parameters) (params UpdateAssetParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeUpdateAssetParams(args [1]string, argsEscaped bool, r *http.Request) (params UpdateAssetParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// UpdateLibraryParams is parameters of updateLibrary operation.
type UpdateLibraryParams struct {
	ID uuid.UUID
}

func unpackUpdateLibraryParams(packed middleware.Parameters) (params UpdateLibraryParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeUpdateLibraryParams(args [1]string, argsEscaped bool, r *http.Request) (params UpdateLibraryParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// UpdateMemoryParams is parameters of updateMemory operation.
type UpdateMemoryParams struct {
	ID uuid.UUID
}

func unpackUpdateMemoryParams(packed middleware.Parameters) (params UpdateMemoryParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeUpdateMemoryParams(args [1]string, argsEscaped bool, r *http.Request) (params UpdateMemoryParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// UpdateNotificationParams is parameters of updateNotification operation.
type UpdateNotificationParams struct {
	ID uuid.UUID
}

func unpackUpdateNotificationParams(packed middleware.Parameters) (params UpdateNotificationParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeUpdateNotificationParams(args [1]string, argsEscaped bool, r *http.Request) (params UpdateNotificationParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// UpdatePartnerParams is parameters of updatePartner operation.
type UpdatePartnerParams struct {
	ID uuid.UUID
}

func unpackUpdatePartnerParams(packed middleware.Parameters) (params UpdatePartnerParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeUpdatePartnerParams(args [1]string, argsEscaped bool, r *http.Request) (params UpdatePartnerParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// UpdatePersonParams is parameters of updatePerson operation.
type UpdatePersonParams struct {
	ID uuid.UUID
}

func unpackUpdatePersonParams(packed middleware.Parameters) (params UpdatePersonParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeUpdatePersonParams(args [1]string, argsEscaped bool, r *http.Request) (params UpdatePersonParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// UpdateSharedLinkParams is parameters of updateSharedLink operation.
type UpdateSharedLinkParams struct {
	ID uuid.UUID
}

func unpackUpdateSharedLinkParams(packed middleware.Parameters) (params UpdateSharedLinkParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeUpdateSharedLinkParams(args [1]string, argsEscaped bool, r *http.Request) (params UpdateSharedLinkParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// UpdateStackParams is parameters of updateStack operation.
type UpdateStackParams struct {
	ID uuid.UUID
}

func unpackUpdateStackParams(packed middleware.Parameters) (params UpdateStackParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeUpdateStackParams(args [1]string, argsEscaped bool, r *http.Request) (params UpdateStackParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// UpdateTagParams is parameters of updateTag operation.
type UpdateTagParams struct {
	ID uuid.UUID
}

func unpackUpdateTagParams(packed middleware.Parameters) (params UpdateTagParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeUpdateTagParams(args [1]string, argsEscaped bool, r *http.Request) (params UpdateTagParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// UpdateUserAdminParams is parameters of updateUserAdmin operation.
type UpdateUserAdminParams struct {
	ID uuid.UUID
}

func unpackUpdateUserAdminParams(packed middleware.Parameters) (params UpdateUserAdminParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeUpdateUserAdminParams(args [1]string, argsEscaped bool, r *http.Request) (params UpdateUserAdminParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// UpdateUserPreferencesAdminParams is parameters of updateUserPreferencesAdmin operation.
type UpdateUserPreferencesAdminParams struct {
	ID uuid.UUID
}

func unpackUpdateUserPreferencesAdminParams(packed middleware.Parameters) (params UpdateUserPreferencesAdminParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeUpdateUserPreferencesAdminParams(args [1]string, argsEscaped bool, r *http.Request) (params UpdateUserPreferencesAdminParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// UploadAssetParams is parameters of uploadAsset operation.
type UploadAssetParams struct {
	Key OptString
	// Sha1 checksum that can be used for duplicate detection before the file is uploaded.
	XImmichChecksum OptString
}

func unpackUploadAssetParams(packed middleware.Parameters) (params UploadAssetParams) {
	{
		key := middleware.ParameterKey{
			Name: "key",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Key = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "x-immich-checksum",
			In:   "header",
		}
		if v, ok := packed[key]; ok {
			params.XImmichChecksum = v.(OptString)
		}
	}
	return params
}

func decodeUploadAssetParams(args [0]string, argsEscaped bool, r *http.Request) (params UploadAssetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	h := uri.NewHeaderDecoder(r.Header)
	// Decode query: key.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "key",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotKeyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotKeyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Key.SetTo(paramsDotKeyVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "key",
			In:   "query",
			Err:  err,
		}
	}
	// Decode header: x-immich-checksum.
	if err := func() error {
		cfg := uri.HeaderParameterDecodingConfig{
			Name:    "x-immich-checksum",
			Explode: false,
		}
		if err := h.HasParam(cfg); err == nil {
			if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotXImmichChecksumVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotXImmichChecksumVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.XImmichChecksum.SetTo(paramsDotXImmichChecksumVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "x-immich-checksum",
			In:   "header",
			Err:  err,
		}
	}
	return params, nil
}

// ValidateParams is parameters of validate operation.
type ValidateParams struct {
	ID uuid.UUID
}

func unpackValidateParams(packed middleware.Parameters) (params ValidateParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeValidateParams(args [1]string, argsEscaped bool, r *http.Request) (params ValidateParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// ViewAssetParams is parameters of viewAsset operation.
type ViewAssetParams struct {
	ID   uuid.UUID
	Key  OptString
	Size OptAssetMediaSize
}

func unpackViewAssetParams(packed middleware.Parameters) (params ViewAssetParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	{
		key := middleware.ParameterKey{
			Name: "key",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Key = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "size",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Size = v.(OptAssetMediaSize)
		}
	}
	return params
}

func decodeViewAssetParams(args [1]string, argsEscaped bool, r *http.Request) (params ViewAssetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: key.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "key",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotKeyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotKeyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Key.SetTo(paramsDotKeyVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "key",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: size.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "size",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSizeVal AssetMediaSize
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotSizeVal = AssetMediaSize(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Size.SetTo(paramsDotSizeVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Size.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "size",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}
